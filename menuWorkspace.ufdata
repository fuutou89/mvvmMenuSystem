{
	"Repositories":[ 
		{
			"Type":"uFrame.MVVM.MvvmWorkspace"			, 
			"Records":[ 
				{
					"Identifier":"027b9de3-8bf4-4dc7-b0d5-908407f431ce"					, 
					"Data":"{\r\n\t\"Identifier\":\"027b9de3-8bf4-4dc7-b0d5-908407f431ce\"\t, \r\n\t\"Name\":\"menuWorkspace\"\t, \r\n\t\"CurrentGraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.SubSystemGraph"			, 
			"Records":[ 
				{
					"Identifier":"dd760a51-e191-4bad-a314-6cb872121520"					, 
					"Data":"{\r\n\t\"IsDirty\":true\t, \r\n\t\"Identifier\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"RootFilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Compiling.CommonNodes.EnumNode"			, 
			"Records":[ 
				{
					"Identifier":"85d129ab-b7c3-4326-a78c-461482364402"					, 
					"Data":"{\r\n\t\"Name\":\"BGM\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"bf28584b-0b98-48e0-b113-249d9c8b7fe9"					, 
					"Data":"{\r\n\t\"Name\":\"AnimType\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Compiling.CommonNodes.EnumChildItem"			, 
			"Records":[ 
				{
					"Identifier":"9d15bd34-7069-402f-9823-1b646e92284a"					, 
					"Data":"{\r\n\t\"Identifier\":\"9d15bd34-7069-402f-9823-1b646e92284a\"\t, \r\n\t\"NodeId\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"NONE\"}\r\n"				}
, 				{
					"Identifier":"f8c0c5a4-85c2-4e9e-876e-9d8c89302215"					, 
					"Data":"{\r\n\t\"Identifier\":\"f8c0c5a4-85c2-4e9e-876e-9d8c89302215\"\t, \r\n\t\"NodeId\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Order\":1\t, \r\n\t\"Name\":\"SAME\"}\r\n"				}
, 				{
					"Identifier":"81500232-dbc6-4c96-ae0d-d2c2980e03ac"					, 
					"Data":"{\r\n\t\"Identifier\":\"81500232-dbc6-4c96-ae0d-d2c2980e03ac\"\t, \r\n\t\"NodeId\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Order\":2\t, \r\n\t\"Name\":\"PLAY\"}\r\n"				}
, 				{
					"Identifier":"d3298bc5-ff3d-45bb-bd21-cb5a37295b5e"					, 
					"Data":"{\r\n\t\"Identifier\":\"d3298bc5-ff3d-45bb-bd21-cb5a37295b5e\"\t, \r\n\t\"NodeId\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Order\":3\t, \r\n\t\"Name\":\"CUSTOM\"}\r\n"				}
, 				{
					"Identifier":"3644031e-9bd0-4b55-b0fe-220b7be0a864"					, 
					"Data":"{\r\n\t\"Identifier\":\"3644031e-9bd0-4b55-b0fe-220b7be0a864\"\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"HIDE\"}\r\n"				}
, 				{
					"Identifier":"4e892254-93b1-485f-a513-afab68200c86"					, 
					"Data":"{\r\n\t\"Identifier\":\"4e892254-93b1-485f-a513-afab68200c86\"\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"HIDE_BACK\"}\r\n"				}
, 				{
					"Identifier":"6c1d0f56-2186-4cec-9389-0748280820ff"					, 
					"Data":"{\r\n\t\"Identifier\":\"6c1d0f56-2186-4cec-9389-0748280820ff\"\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"SHOW_BACK\"}\r\n"				}
, 				{
					"Identifier":"a4f04a63-5801-47b7-b713-94cbff2c6768"					, 
					"Data":"{\r\n\t\"Identifier\":\"a4f04a63-5801-47b7-b713-94cbff2c6768\"\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"SHOW\"}\r\n"				}
, 				{
					"Identifier":"aadd5b8a-79e0-4e11-b0ca-7f7181d036a0"					, 
					"Data":"{\r\n\t\"Identifier\":\"aadd5b8a-79e0-4e11-b0ca-7f7181d036a0\"\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"NO_ANIM\"}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Compiling.CommonNodes.TypeReferenceNode"			, 
			"Records":[ 
				{
					"Identifier":"5e751e8e-62b5-475b-bb47-4ab96229cf19"					, 
					"Data":"{\r\n\t\"Name\":\"System.Object\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"5e751e8e-62b5-475b-bb47-4ab96229cf19\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"7e91983f-404c-4cf9-a787-b67f83919563"					, 
					"Data":"{\r\n\t\"Name\":\"Color\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"7e91983f-404c-4cf9-a787-b67f83919563\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.CommandNode"			, 
			"Records":[ 
				{
					"Identifier":"450e9db8-018c-444b-a118-663aec791f62"					, 
					"Data":"{\r\n\t\"Name\":\"LoadPanel\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"450e9db8-018c-444b-a118-663aec791f62\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"45d30367-166d-4e98-9e41-ad88c2ebfb7e"					, 
					"Data":"{\r\n\t\"Name\":\"FocusPanel\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"45d30367-166d-4e98-9e41-ad88c2ebfb7e\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"696d8dda-3cbb-43ec-80cd-ec88bbd662fc"					, 
					"Data":"{\r\n\t\"Name\":\"SetPanelData\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"696d8dda-3cbb-43ec-80cd-ec88bbd662fc\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"9606d603-eaae-4724-a5c9-966dc1b2194f"					, 
					"Data":"{\r\n\t\"Name\":\"PlayPanelAnimation\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"9606d603-eaae-4724-a5c9-966dc1b2194f\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.PropertiesChildItem"			, 
			"Records":[ 
				{
					"Identifier":"6d045685-addd-4e68-9966-8ef777f91eb3"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"6d045685-addd-4e68-9966-8ef777f91eb3\"\t, \r\n\t\"NodeId\":\"450e9db8-018c-444b-a118-663aec791f62\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"0cd9aa86-f4a3-436e-88c9-bc91731a8746"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Boolean\"\t, \r\n\t\"Identifier\":\"0cd9aa86-f4a3-436e-88c9-bc91731a8746\"\t, \r\n\t\"NodeId\":\"45d30367-166d-4e98-9e41-ad88c2ebfb7e\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"isFocus\"}\r\n"				}
, 				{
					"Identifier":"5b77613e-5210-40d0-a257-9b7003a8f91a"					, 
					"Data":"{\r\n\t\"RelatedType\":\"5e751e8e-62b5-475b-bb47-4ab96229cf19\"\t, \r\n\t\"Identifier\":\"5b77613e-5210-40d0-a257-9b7003a8f91a\"\t, \r\n\t\"NodeId\":\"696d8dda-3cbb-43ec-80cd-ec88bbd662fc\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelData\"}\r\n"				}
, 				{
					"Identifier":"513454a4-28c4-40ac-80e0-2072b541167e"					, 
					"Data":"{\r\n\t\"RelatedType\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"Identifier\":\"513454a4-28c4-40ac-80e0-2072b541167e\"\t, \r\n\t\"NodeId\":\"9606d603-eaae-4724-a5c9-966dc1b2194f\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelAnimType\"}\r\n"				}
, 				{
					"Identifier":"342365d1-8279-4d9c-b70a-c8ce54057d8e"					, 
					"Data":"{\r\n\t\"RelatedType\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Identifier\":\"342365d1-8279-4d9c-b70a-c8ce54057d8e\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"shieldEmpty\"}\r\n"				}
, 				{
					"Identifier":"5338830d-be7f-4222-a9b8-ce89ad491cfc"					, 
					"Data":"{\r\n\t\"RelatedType\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Identifier\":\"5338830d-be7f-4222-a9b8-ce89ad491cfc\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"mainMenu\"}\r\n"				}
, 				{
					"Identifier":"81a337eb-6c26-4ccf-8633-a080866f9cf8"					, 
					"Data":"{\r\n\t\"RelatedType\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Identifier\":\"81a337eb-6c26-4ccf-8633-a080866f9cf8\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"loadingTop\"}\r\n"				}
, 				{
					"Identifier":"a80bfa10-f107-489a-a5d7-ebf047bfefa6"					, 
					"Data":"{\r\n\t\"RelatedType\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Identifier\":\"a80bfa10-f107-489a-a5d7-ebf047bfefa6\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"shieldTop\"}\r\n"				}
, 				{
					"Identifier":"466b4255-3860-47fd-a6b0-e794a1ccc364"					, 
					"Data":"{\r\n\t\"RelatedType\":\"7e91983f-404c-4cf9-a787-b67f83919563\"\t, \r\n\t\"Identifier\":\"466b4255-3860-47fd-a6b0-e794a1ccc364\"\t, \r\n\t\"NodeId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"color\"}\r\n"				}
, 				{
					"Identifier":"00963ad9-0599-4372-a98a-fc13285da004"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Single\"\t, \r\n\t\"Identifier\":\"00963ad9-0599-4372-a98a-fc13285da004\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"depthIndex\"}\r\n"				}
, 				{
					"Identifier":"05fb9e6b-bc67-4506-a049-d1c37345443f"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"05fb9e6b-bc67-4506-a049-d1c37345443f\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"3091c5cb-3956-465d-ae3c-6c4cfb8d877b"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Boolean\"\t, \r\n\t\"Identifier\":\"3091c5cb-3956-465d-ae3c-6c4cfb8d877b\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"isCache\"}\r\n"				}
, 				{
					"Identifier":"335d05c0-73a4-4eaf-ae88-438e9865ce9b"					, 
					"Data":"{\r\n\t\"RelatedType\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"Identifier\":\"335d05c0-73a4-4eaf-ae88-438e9865ce9b\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"BGMType\"}\r\n"				}
, 				{
					"Identifier":"559a7bd2-bedb-4030-9347-7f28b6f5b201"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"559a7bd2-bedb-4030-9347-7f28b6f5b201\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"CurrentBGM\"}\r\n"				}
, 				{
					"Identifier":"922c78d8-dbcc-4a38-ba0a-987ca4f60255"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Boolean\"\t, \r\n\t\"Identifier\":\"922c78d8-dbcc-4a38-ba0a-987ca4f60255\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"isActive\"}\r\n"				}
, 				{
					"Identifier":"980512a0-092b-456c-b3d3-301e700a02b3"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"980512a0-092b-456c-b3d3-301e700a02b3\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"BGMName\"}\r\n"				}
, 				{
					"Identifier":"ee408287-cc00-4dc5-b823-bd036056dd33"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Int32\"\t, \r\n\t\"Identifier\":\"ee408287-cc00-4dc5-b823-bd036056dd33\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"posIndex\"}\r\n"				}
, 				{
					"Identifier":"a8ea0ed7-c5c4-4360-b874-22b3932723ac"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Boolean\"\t, \r\n\t\"Identifier\":\"a8ea0ed7-c5c4-4360-b874-22b3932723ac\"\t, \r\n\t\"NodeId\":\"215c84d7-3f2b-4091-a69b-a81f0b1cf751\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"isForceHide\"}\r\n"				}
, 				{
					"Identifier":"7238fa27-bcc3-40dc-9326-a9f586544366"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"7238fa27-bcc3-40dc-9326-a9f586544366\"\t, \r\n\t\"NodeId\":\"29dd07e4-d4c6-4c6f-9063-6148a7379f5a\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"f6304e98-e3bf-4d92-838a-aa75df53f781"					, 
					"Data":"{\r\n\t\"RelatedType\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Identifier\":\"f6304e98-e3bf-4d92-838a-aa75df53f781\"\t, \r\n\t\"NodeId\":\"29dd07e4-d4c6-4c6f-9063-6148a7379f5a\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelViewModel\"}\r\n"				}
, 				{
					"Identifier":"68b052c2-0e16-4723-9510-b5f54d20e58c"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Single\"\t, \r\n\t\"Identifier\":\"68b052c2-0e16-4723-9510-b5f54d20e58c\"\t, \r\n\t\"NodeId\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"alpha\"}\r\n"				}
, 				{
					"Identifier":"0462d6f4-9366-4d16-9997-96a575a5c528"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Single\"\t, \r\n\t\"Identifier\":\"0462d6f4-9366-4d16-9997-96a575a5c528\"\t, \r\n\t\"NodeId\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Order\":1\t, \r\n\t\"Name\":\"timeOut\"}\r\n"				}
, 				{
					"Identifier":"ad0088fe-af47-4ff6-97e0-57c2f20114bf"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Single\"\t, \r\n\t\"Identifier\":\"ad0088fe-af47-4ff6-97e0-57c2f20114bf\"\t, \r\n\t\"NodeId\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Order\":2\t, \r\n\t\"Name\":\"delay\"}\r\n"				}
, 				{
					"Identifier":"7129e660-fd07-42b2-8f13-b1ae5609e863"					, 
					"Data":"{\r\n\t\"RelatedType\":\"System.String\"\t, \r\n\t\"Identifier\":\"7129e660-fd07-42b2-8f13-b1ae5609e863\"\t, \r\n\t\"NodeId\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Order\":3\t, \r\n\t\"Name\":\"callBack\"}\r\n"				}
, 				{
					"Identifier":"85706fc9-d87f-4e93-9804-6c9bfedc33fc"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"85706fc9-d87f-4e93-9804-6c9bfedc33fc\"\t, \r\n\t\"NodeId\":\"90d0058f-ce26-47c8-b83e-592dfea1b1d2\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"222c4d96-3b9c-455f-8936-de5eb7e59f3f"					, 
					"Data":"{\r\n\t\"RelatedType\":\"Boolean\"\t, \r\n\t\"Identifier\":\"222c4d96-3b9c-455f-8936-de5eb7e59f3f\"\t, \r\n\t\"NodeId\":\"b0c86f2c-01cb-4f18-b764-fac5ef3a61c4\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"immediate\"}\r\n"				}
, 				{
					"Identifier":"8d9a11b5-6da3-4d26-94e0-198d02d45ab6"					, 
					"Data":"{\r\n\t\"RelatedType\":\"System.String\"\t, \r\n\t\"Identifier\":\"8d9a11b5-6da3-4d26-94e0-198d02d45ab6\"\t, \r\n\t\"NodeId\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"onDeactive\"}\r\n"				}
, 				{
					"Identifier":"9db90502-532b-4c35-b729-98793e4eb9f6"					, 
					"Data":"{\r\n\t\"RelatedType\":\"5e751e8e-62b5-475b-bb47-4ab96229cf19\"\t, \r\n\t\"Identifier\":\"9db90502-532b-4c35-b729-98793e4eb9f6\"\t, \r\n\t\"NodeId\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"data\"}\r\n"				}
, 				{
					"Identifier":"bfa7e077-163c-44f6-9fdf-a6dcd48eebc4"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"bfa7e077-163c-44f6-9fdf-a6dcd48eebc4\"\t, \r\n\t\"NodeId\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"1eb8565a-f928-4802-af85-033ebace6c06"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"1eb8565a-f928-4802-af85-033ebace6c06\"\t, \r\n\t\"NodeId\":\"ec700535-0834-43e1-ae66-66140331110d\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"panelName\"}\r\n"				}
, 				{
					"Identifier":"e521f571-ce89-49a9-b3a0-3f222cd600a8"					, 
					"Data":"{\r\n\t\"RelatedType\":\"5e751e8e-62b5-475b-bb47-4ab96229cf19\"\t, \r\n\t\"Identifier\":\"e521f571-ce89-49a9-b3a0-3f222cd600a8\"\t, \r\n\t\"NodeId\":\"ec72d429-62d1-4ea4-ae6c-134d22420de0\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"data\"}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.ElementNode"			, 
			"Records":[ 
				{
					"Identifier":"3220f288-0132-4161-8d2f-8404c3900002"					, 
					"Data":"{\r\n\t\"Name\":\"MenuRoot\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"70cf21e2-99fa-41dd-9e8a-c79c414e4f23"					, 
					"Data":"{\r\n\t\"Name\":\"Shield\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"e34a6182-ec96-493c-9c10-336d9f4a6ffa"					, 
					"Data":"{\r\n\t\"Name\":\"MainMenu\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"ec012b39-6fc7-4fa0-9223-41fcb32d9b16"					, 
					"Data":"{\r\n\t\"Name\":\"Panel\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.CollectionsChildItem"			, 
			"Records":[ 
				{
					"Identifier":"29e0b7aa-91c7-41e1-af0c-b79b33e3eb48"					, 
					"Data":"{\r\n\t\"RelatedType\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Identifier\":\"29e0b7aa-91c7-41e1-af0c-b79b33e3eb48\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"Shields\"}\r\n"				}
, 				{
					"Identifier":"c9d628c3-acfb-41a3-ad45-be512a8d63ff"					, 
					"Data":"{\r\n\t\"RelatedType\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Identifier\":\"c9d628c3-acfb-41a3-ad45-be512a8d63ff\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"Panels\"}\r\n"				}
, 				{
					"Identifier":"b5b8a8fc-d367-41ad-8ff3-ff91732b45c7"					, 
					"Data":"{\r\n\t\"RelatedType\":\"String\"\t, \r\n\t\"Identifier\":\"b5b8a8fc-d367-41ad-8ff3-ff91732b45c7\"\t, \r\n\t\"NodeId\":\"1bc77d5c-76e9-46f3-ad24-c62c5b8e8c9b\"\t, \r\n\t\"Order\":0\t, \r\n\t\"Name\":\"exceptList\"}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.CommandsChildItem"			, 
			"Records":[ 
				{
					"Identifier":"b182b59d-1b5b-47fa-8fb2-62f1ce403e73"					, 
					"Data":"{\r\n\t\"Name\":\"LoadPanel\"\t, \r\n\t\"RelatedType\":\"450e9db8-018c-444b-a118-663aec791f62\"\t, \r\n\t\"Identifier\":\"b182b59d-1b5b-47fa-8fb2-62f1ce403e73\"\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"23d95ff4-1a52-4836-9cff-9b308b65428f"					, 
					"Data":"{\r\n\t\"Name\":\"FocusPanel\"\t, \r\n\t\"RelatedType\":\"45d30367-166d-4e98-9e41-ad88c2ebfb7e\"\t, \r\n\t\"Identifier\":\"23d95ff4-1a52-4836-9cff-9b308b65428f\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"2f2e4cbb-5080-4c9d-a2b9-362f86efd1f0"					, 
					"Data":"{\r\n\t\"Name\":\"HidePanel\"\t, \r\n\t\"RelatedType\":\"Void\"\t, \r\n\t\"Identifier\":\"2f2e4cbb-5080-4c9d-a2b9-362f86efd1f0\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":1}\r\n"				}
, 				{
					"Identifier":"45ac1e60-eabd-4a55-9e07-74c9ff9eebd9"					, 
					"Data":"{\r\n\t\"Name\":\"ShowPanel\"\t, \r\n\t\"RelatedType\":\"Void\"\t, \r\n\t\"Identifier\":\"45ac1e60-eabd-4a55-9e07-74c9ff9eebd9\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":2}\r\n"				}
, 				{
					"Identifier":"8649e4ea-7de3-423f-96dc-299cabb18d7b"					, 
					"Data":"{\r\n\t\"Name\":\"SetPanelData\"\t, \r\n\t\"RelatedType\":\"696d8dda-3cbb-43ec-80cd-ec88bbd662fc\"\t, \r\n\t\"Identifier\":\"8649e4ea-7de3-423f-96dc-299cabb18d7b\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":3}\r\n"				}
, 				{
					"Identifier":"82e7e853-7e39-4372-85e0-ee8ff72c618f"					, 
					"Data":"{\r\n\t\"Name\":\"PlayPanelAnimation\"\t, \r\n\t\"RelatedType\":\"9606d603-eaae-4724-a5c9-966dc1b2194f\"\t, \r\n\t\"Identifier\":\"82e7e853-7e39-4372-85e0-ee8ff72c618f\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":4}\r\n"				}
, 				{
					"Identifier":"b7fda52d-047d-442c-ab01-7f622ecfcb8f"					, 
					"Data":"{\r\n\t\"Name\":\"DestroyPanel\"\t, \r\n\t\"RelatedType\":\"Void\"\t, \r\n\t\"Identifier\":\"b7fda52d-047d-442c-ab01-7f622ecfcb8f\"\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Order\":5}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.ServiceNode"			, 
			"Records":[ 
				{
					"Identifier":"5f86b1e1-0814-4a78-8cca-88351a5ad1e4"					, 
					"Data":"{\r\n\t\"Name\":\"MenuService\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.HandlersReference"			, 
			"Records":[ 
				{
					"Identifier":"10c10a05-af5e-4e16-9d68-536cb422a247"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"26b5d4bf-9cb3-4e32-bcee-e6262a025306\"\t, \r\n\t\"Identifier\":\"10c10a05-af5e-4e16-9d68-536cb422a247\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"196f6c41-f4a6-4c23-a6d2-ae3d757f6ea2"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"1bc77d5c-76e9-46f3-ad24-c62c5b8e8c9b\"\t, \r\n\t\"Identifier\":\"196f6c41-f4a6-4c23-a6d2-ae3d757f6ea2\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":1}\r\n"				}
, 				{
					"Identifier":"34f9dd3c-dcd4-427d-ba5a-c9773196de8c"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"88259a39-1ead-417f-a5c4-54703de274c3\"\t, \r\n\t\"Identifier\":\"34f9dd3c-dcd4-427d-ba5a-c9773196de8c\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":2}\r\n"				}
, 				{
					"Identifier":"41ddc5a2-455b-43a2-ae1f-65488d7ed16d"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"ec700535-0834-43e1-ae66-66140331110d\"\t, \r\n\t\"Identifier\":\"41ddc5a2-455b-43a2-ae1f-65488d7ed16d\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":3}\r\n"				}
, 				{
					"Identifier":"63145138-41dd-4099-8d5e-1caf8a56fb2f"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"b0c86f2c-01cb-4f18-b764-fac5ef3a61c4\"\t, \r\n\t\"Identifier\":\"63145138-41dd-4099-8d5e-1caf8a56fb2f\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":4}\r\n"				}
, 				{
					"Identifier":"659b3f2b-e1e4-40de-993e-aebb8927fb3e"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"edca0673-0553-470b-b5a5-87ab8b8ef927\"\t, \r\n\t\"Identifier\":\"659b3f2b-e1e4-40de-993e-aebb8927fb3e\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":5}\r\n"				}
, 				{
					"Identifier":"89b2e1dd-ad26-4063-a187-1673d43b32b4"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"35761be1-7685-4cf5-8ae1-939ef53358b4\"\t, \r\n\t\"Identifier\":\"89b2e1dd-ad26-4063-a187-1673d43b32b4\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":6}\r\n"				}
, 				{
					"Identifier":"a1f7c106-e1c4-473f-82cd-4aab583aaa3f"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"47bac336-c708-4afe-902b-8bf2522c1e54\"\t, \r\n\t\"Identifier\":\"a1f7c106-e1c4-473f-82cd-4aab583aaa3f\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":7}\r\n"				}
, 				{
					"Identifier":"a2d32369-5725-4ebd-a95f-317bbb10524d"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Identifier\":\"a2d32369-5725-4ebd-a95f-317bbb10524d\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":8}\r\n"				}
, 				{
					"Identifier":"c26e6fad-1f65-4643-8ed6-734e1da3abf8"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"215c84d7-3f2b-4091-a69b-a81f0b1cf751\"\t, \r\n\t\"Identifier\":\"c26e6fad-1f65-4643-8ed6-734e1da3abf8\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":9}\r\n"				}
, 				{
					"Identifier":"ce757d20-d4ef-49a8-9d30-102e48f13eb0"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"31f28c3c-3031-4a7b-9524-3e7607a97cf8\"\t, \r\n\t\"Identifier\":\"ce757d20-d4ef-49a8-9d30-102e48f13eb0\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":10}\r\n"				}
, 				{
					"Identifier":"e8acacce-7a5a-4bc0-99b5-1c509159119f"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"fddba227-dab9-4534-b190-da8ecf905e55\"\t, \r\n\t\"Identifier\":\"e8acacce-7a5a-4bc0-99b5-1c509159119f\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":11}\r\n"				}
, 				{
					"Identifier":"f5fdbd3e-3673-4d7d-a75f-51300c7f404a"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"d1c13c87-d0bd-4cd6-b27d-263f4396db56\"\t, \r\n\t\"Identifier\":\"f5fdbd3e-3673-4d7d-a75f-51300c7f404a\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":12}\r\n"				}
, 				{
					"Identifier":"d610d209-3f1a-4b28-98c1-738d2b4912a3"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"ec72d429-62d1-4ea4-ae6c-134d22420de0\"\t, \r\n\t\"Identifier\":\"d610d209-3f1a-4b28-98c1-738d2b4912a3\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":13}\r\n"				}
, 				{
					"Identifier":"6ff7a5ab-ed70-4cbf-84aa-a509116f81b9"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"90d0058f-ce26-47c8-b83e-592dfea1b1d2\"\t, \r\n\t\"Identifier\":\"6ff7a5ab-ed70-4cbf-84aa-a509116f81b9\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":14}\r\n"				}
, 				{
					"Identifier":"f9cbf352-ada5-4217-8f41-0d23d90240e8"					, 
					"Data":"{\r\n\t\"SourceIdentifier\":\"29dd07e4-d4c6-4c6f-9063-6148a7379f5a\"\t, \r\n\t\"Identifier\":\"f9cbf352-ada5-4217-8f41-0d23d90240e8\"\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Order\":17}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.SimpleClassNode"			, 
			"Records":[ 
				{
					"Identifier":"1bc77d5c-76e9-46f3-ad24-c62c5b8e8c9b"					, 
					"Data":"{\r\n\t\"Name\":\"DestoryInactivePanelsCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"1bc77d5c-76e9-46f3-ad24-c62c5b8e8c9b\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"215c84d7-3f2b-4091-a69b-a81f0b1cf751"					, 
					"Data":"{\r\n\t\"Name\":\"HideLoadingCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"215c84d7-3f2b-4091-a69b-a81f0b1cf751\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"26b5d4bf-9cb3-4e32-bcee-e6262a025306"					, 
					"Data":"{\r\n\t\"Name\":\"OpenScreenCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"26b5d4bf-9cb3-4e32-bcee-e6262a025306\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"29dd07e4-d4c6-4c6f-9063-6148a7379f5a"					, 
					"Data":"{\r\n\t\"Name\":\"PanelLoadedEvent\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"29dd07e4-d4c6-4c6f-9063-6148a7379f5a\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"31f28c3c-3031-4a7b-9524-3e7607a97cf8"					, 
					"Data":"{\r\n\t\"Name\":\"OpenSubScreenCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"31f28c3c-3031-4a7b-9524-3e7607a97cf8\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"35761be1-7685-4cf5-8ae1-939ef53358b4"					, 
					"Data":"{\r\n\t\"Name\":\"OpenMainMenuCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"35761be1-7685-4cf5-8ae1-939ef53358b4\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"3bfa8124-0b20-497b-ba7f-7617ea639a13"					, 
					"Data":"{\r\n\t\"Name\":\"ShowLoadingCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"478bdc50-81e9-450c-8940-098c245cd3d0"					, 
					"Data":"{\r\n\t\"Name\":\"LockScreenEvent\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"478bdc50-81e9-450c-8940-098c245cd3d0\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"47bac336-c708-4afe-902b-8bf2522c1e54"					, 
					"Data":"{\r\n\t\"Name\":\"CreateLoadingCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"47bac336-c708-4afe-902b-8bf2522c1e54\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"88259a39-1ead-417f-a5c4-54703de274c3"					, 
					"Data":"{\r\n\t\"Name\":\"HideMainMenuCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"88259a39-1ead-417f-a5c4-54703de274c3\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"90d0058f-ce26-47c8-b83e-592dfea1b1d2"					, 
					"Data":"{\r\n\t\"Name\":\"PanelUnloadEvent\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"90d0058f-ce26-47c8-b83e-592dfea1b1d2\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"b0c86f2c-01cb-4f18-b764-fac5ef3a61c4"					, 
					"Data":"{\r\n\t\"Name\":\"ClosePanelCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"b0c86f2c-01cb-4f18-b764-fac5ef3a61c4\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"b3d6c157-78d8-4dda-813d-d784102f271a"					, 
					"Data":"{\r\n\t\"Name\":\"OpenPanelCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"d1c13c87-d0bd-4cd6-b27d-263f4396db56"					, 
					"Data":"{\r\n\t\"Name\":\"OpenPopupCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"d1c13c87-d0bd-4cd6-b27d-263f4396db56\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"ec700535-0834-43e1-ae66-66140331110d"					, 
					"Data":"{\r\n\t\"Name\":\"PreLoadPanelCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"ec700535-0834-43e1-ae66-66140331110d\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"ec72d429-62d1-4ea4-ae6c-134d22420de0"					, 
					"Data":"{\r\n\t\"Name\":\"ResetPanelCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"ec72d429-62d1-4ea4-ae6c-134d22420de0\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"edca0673-0553-470b-b5a5-87ab8b8ef927"					, 
					"Data":"{\r\n\t\"Name\":\"ShowMainMenuCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"edca0673-0553-470b-b5a5-87ab8b8ef927\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"f7f9ae25-a127-4805-95f2-bab5a7997fad"					, 
					"Data":"{\r\n\t\"Name\":\"UnLockScreenEvent\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"f7f9ae25-a127-4805-95f2-bab5a7997fad\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"fddba227-dab9-4534-b190-da8ecf905e55"					, 
					"Data":"{\r\n\t\"Name\":\"GoHomeScreenCommand\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"fddba227-dab9-4534-b190-da8ecf905e55\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.SubSystemNode"			, 
			"Records":[ 
				{
					"Identifier":"0401c728-fae3-443c-9048-65d13d1173d7"					, 
					"Data":"{\r\n\t\"Name\":\"MenuSystem\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.InstancesReference"			, 
			"Records":[ 
				{
					"Identifier":"8f498e32-df9e-4b4b-baab-d3636dc2ddb9"					, 
					"Data":"{\r\n\t\"Name\":\"MenuRoot\"\t, \r\n\t\"SourceIdentifier\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Identifier\":\"8f498e32-df9e-4b4b-baab-d3636dc2ddb9\"\t, \r\n\t\"NodeId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Order\":0}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.ViewNode"			, 
			"Records":[ 
				{
					"Identifier":"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06"					, 
					"Data":"{\r\n\t\"ElementInputSlotId\":\"50337321-b0ae-4748-ad2f-b442653b3191\"\t, \r\n\t\"ScenePropertiesInputSlotId\":\"973011a1-90d5-49fd-aa3f-64f216e2b642\"\t, \r\n\t\"Name\":\"PanelView\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"2bbb13ce-92e0-4b43-be24-f24e6b28247a"					, 
					"Data":"{\r\n\t\"ElementInputSlotId\":\"3972994f-b39c-4975-8a86-747af18e7fd4\"\t, \r\n\t\"ScenePropertiesInputSlotId\":\"2c81eb28-b087-49b9-83a7-0dfe11f7c2f5\"\t, \r\n\t\"Name\":\"MenuRootView\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"4f3890d9-7d7d-4819-9cfd-6048de8efd6c"					, 
					"Data":"{\r\n\t\"ElementInputSlotId\":\"15709a76-5e2e-44ff-9bd9-37c919405282\"\t, \r\n\t\"ScenePropertiesInputSlotId\":\"723678b3-d2ff-4b85-802e-e57918c15dfd\"\t, \r\n\t\"Name\":\"MainMenuView\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"4f3890d9-7d7d-4819-9cfd-6048de8efd6c\"\t, \r\n\t\"Expanded\":false}\r\n"				}
, 				{
					"Identifier":"a040af48-00a3-465e-8364-68c17792bd19"					, 
					"Data":"{\r\n\t\"ElementInputSlotId\":\"a1593ce3-4580-4c58-8030-ccafefb4ebf3\"\t, \r\n\t\"ScenePropertiesInputSlotId\":\"2ae4c050-e3bc-48bb-9fb0-0c908a91caed\"\t, \r\n\t\"Name\":\"ShieldView\"\t, \r\n\t\"Order\":0\t, \r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"Identifier\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"Expanded\":false}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.BindingsReference"			, 
			"Records":[ 
				{
					"Identifier":"4a8ca992-d220-4acb-b482-978bbcd8475a"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"82e7e853-7e39-4372-85e0-ee8ff72c618f\"\t, \r\n\t\"Identifier\":\"4a8ca992-d220-4acb-b482-978bbcd8475a\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"4fc105bd-40e4-41a8-b73d-c2f683b24935"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"b7fda52d-047d-442c-ab01-7f622ecfcb8f\"\t, \r\n\t\"Identifier\":\"4fc105bd-40e4-41a8-b73d-c2f683b24935\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"922bbd8f-5fe6-49dd-b0ad-da62a1e67494"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"2f2e4cbb-5080-4c9d-a2b9-362f86efd1f0\"\t, \r\n\t\"Identifier\":\"922bbd8f-5fe6-49dd-b0ad-da62a1e67494\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"9c46d2cb-6299-4b28-b4a9-0b26b38c154c"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"45ac1e60-eabd-4a55-9e07-74c9ff9eebd9\"\t, \r\n\t\"Identifier\":\"9c46d2cb-6299-4b28-b4a9-0b26b38c154c\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"b8ae4894-8cfe-45ef-aa0d-518b73fdafea"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"ee408287-cc00-4dc5-b823-bd036056dd33\"\t, \r\n\t\"Identifier\":\"b8ae4894-8cfe-45ef-aa0d-518b73fdafea\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"c15249f7-757d-4e73-acea-05a98f418171"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"23d95ff4-1a52-4836-9cff-9b308b65428f\"\t, \r\n\t\"Identifier\":\"c15249f7-757d-4e73-acea-05a98f418171\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"d0019a24-f39c-4da8-87c2-723a72edf9be"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"922c78d8-dbcc-4a38-ba0a-987ca4f60255\"\t, \r\n\t\"Identifier\":\"d0019a24-f39c-4da8-87c2-723a72edf9be\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"d06bda3e-39cb-460f-9508-7637901e35c2"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"8649e4ea-7de3-423f-96dc-299cabb18d7b\"\t, \r\n\t\"Identifier\":\"d06bda3e-39cb-460f-9508-7637901e35c2\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"eea4aee6-d42c-456e-adb0-6a089910d5fc"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"00963ad9-0599-4372-a98a-fc13285da004\"\t, \r\n\t\"Identifier\":\"eea4aee6-d42c-456e-adb0-6a089910d5fc\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"28f02642-c8c0-4a16-bfda-d749737ff7ec"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"342365d1-8279-4d9c-b70a-c8ce54057d8e\"\t, \r\n\t\"Identifier\":\"28f02642-c8c0-4a16-bfda-d749737ff7ec\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"33848d43-b459-4477-a9ed-a15814cde018"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"a80bfa10-f107-489a-a5d7-ebf047bfefa6\"\t, \r\n\t\"Identifier\":\"33848d43-b459-4477-a9ed-a15814cde018\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"9ef249e4-42f6-465a-8908-93d46233a4cd"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"81a337eb-6c26-4ccf-8633-a080866f9cf8\"\t, \r\n\t\"Identifier\":\"9ef249e4-42f6-465a-8908-93d46233a4cd\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"a29b11e2-7f93-4c78-abac-95f457e669e2"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"5338830d-be7f-4222-a9b8-ce89ad491cfc\"\t, \r\n\t\"Identifier\":\"a29b11e2-7f93-4c78-abac-95f457e669e2\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"b0d14b79-2618-42ee-9602-79a165ce1fed"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCommandExecuted\"\t, \r\n\t\"SourceIdentifier\":\"b182b59d-1b5b-47fa-8fb2-62f1ce403e73\"\t, \r\n\t\"Identifier\":\"b0d14b79-2618-42ee-9602-79a165ce1fed\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"d121be4e-e33c-4558-ada3-214a09867a8d"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCollection\"\t, \r\n\t\"SourceIdentifier\":\"29e0b7aa-91c7-41e1-af0c-b79b33e3eb48\"\t, \r\n\t\"Identifier\":\"d121be4e-e33c-4558-ada3-214a09867a8d\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"f79c59ed-0056-4319-ba29-6589384c3eb0"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindCollection\"\t, \r\n\t\"SourceIdentifier\":\"c9d628c3-acfb-41a3-ad45-be512a8d63ff\"\t, \r\n\t\"Identifier\":\"f79c59ed-0056-4319-ba29-6589384c3eb0\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"5a6ae67f-f742-4e34-9be6-5c2b364b5b65"					, 
					"Data":"{\r\n\t\"BindingName\":\"BindProperty\"\t, \r\n\t\"SourceIdentifier\":\"466b4255-3860-47fd-a6b0-e794a1ccc364\"\t, \r\n\t\"Identifier\":\"5a6ae67f-f742-4e34-9be6-5c2b364b5b65\"\t, \r\n\t\"NodeId\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"Order\":0}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.Element"			, 
			"Records":[ 
				{
					"Identifier":"50337321-b0ae-4748-ad2f-b442653b3191"					, 
					"Data":"{\r\n\t\"Identifier\":\"50337321-b0ae-4748-ad2f-b442653b3191\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"3972994f-b39c-4975-8a86-747af18e7fd4"					, 
					"Data":"{\r\n\t\"Identifier\":\"3972994f-b39c-4975-8a86-747af18e7fd4\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"15709a76-5e2e-44ff-9bd9-37c919405282"					, 
					"Data":"{\r\n\t\"Identifier\":\"15709a76-5e2e-44ff-9bd9-37c919405282\"\t, \r\n\t\"NodeId\":\"4f3890d9-7d7d-4819-9cfd-6048de8efd6c\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"a1593ce3-4580-4c58-8030-ccafefb4ebf3"					, 
					"Data":"{\r\n\t\"Identifier\":\"a1593ce3-4580-4c58-8030-ccafefb4ebf3\"\t, \r\n\t\"NodeId\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"Order\":0}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.MVVM.SceneProperties"			, 
			"Records":[ 
				{
					"Identifier":"973011a1-90d5-49fd-aa3f-64f216e2b642"					, 
					"Data":"{\r\n\t\"Identifier\":\"973011a1-90d5-49fd-aa3f-64f216e2b642\"\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"2c81eb28-b087-49b9-83a7-0dfe11f7c2f5"					, 
					"Data":"{\r\n\t\"Identifier\":\"2c81eb28-b087-49b9-83a7-0dfe11f7c2f5\"\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"723678b3-d2ff-4b85-802e-e57918c15dfd"					, 
					"Data":"{\r\n\t\"Identifier\":\"723678b3-d2ff-4b85-802e-e57918c15dfd\"\t, \r\n\t\"NodeId\":\"4f3890d9-7d7d-4819-9cfd-6048de8efd6c\"\t, \r\n\t\"Order\":0}\r\n"				}
, 				{
					"Identifier":"2ae4c050-e3bc-48bb-9fb0-0c908a91caed"					, 
					"Data":"{\r\n\t\"Identifier\":\"2ae4c050-e3bc-48bb-9fb0-0c908a91caed\"\t, \r\n\t\"NodeId\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"Order\":0}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Graphs.Data.ConnectionData"			, 
			"Records":[ 
				{
					"Identifier":"0153b018-b63e-4df5-9b23-5c29d382a73e"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"InputIdentifier\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Identifier\":\"0153b018-b63e-4df5-9b23-5c29d382a73e\"}\r\n"				}
, 				{
					"Identifier":"04da3283-e97f-44f7-8ea6-7e0a0840ef60"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"InputIdentifier\":\"a1593ce3-4580-4c58-8030-ccafefb4ebf3\"\t, \r\n\t\"Identifier\":\"04da3283-e97f-44f7-8ea6-7e0a0840ef60\"}\r\n"				}
, 				{
					"Identifier":"3d82fc51-aaeb-4145-aa54-35176921f4f9"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"InputIdentifier\":\"31f28c3c-3031-4a7b-9524-3e7607a97cf8\"\t, \r\n\t\"Identifier\":\"3d82fc51-aaeb-4145-aa54-35176921f4f9\"}\r\n"				}
, 				{
					"Identifier":"4f6adde6-7ee4-4570-9d3b-11c00dfea37d"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"InputIdentifier\":\"4f3890d9-7d7d-4819-9cfd-6048de8efd6c\"\t, \r\n\t\"Identifier\":\"4f6adde6-7ee4-4570-9d3b-11c00dfea37d\"}\r\n"				}
, 				{
					"Identifier":"770b08cf-45ac-4242-b36a-7d88933b5421"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"InputIdentifier\":\"d1c13c87-d0bd-4cd6-b27d-263f4396db56\"\t, \r\n\t\"Identifier\":\"770b08cf-45ac-4242-b36a-7d88933b5421\"}\r\n"				}
, 				{
					"Identifier":"778bebde-9d74-4c4c-8848-983a0509b5c0"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"InputIdentifier\":\"35761be1-7685-4cf5-8ae1-939ef53358b4\"\t, \r\n\t\"Identifier\":\"778bebde-9d74-4c4c-8848-983a0509b5c0\"}\r\n"				}
, 				{
					"Identifier":"84852e47-e668-4090-8fa3-0975b73ea0c2"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"InputIdentifier\":\"3972994f-b39c-4975-8a86-747af18e7fd4\"\t, \r\n\t\"Identifier\":\"84852e47-e668-4090-8fa3-0975b73ea0c2\"}\r\n"				}
, 				{
					"Identifier":"98731d6e-9d0b-4e77-a009-2a8ab85ee94f"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"InputIdentifier\":\"26b5d4bf-9cb3-4e32-bcee-e6262a025306\"\t, \r\n\t\"Identifier\":\"98731d6e-9d0b-4e77-a009-2a8ab85ee94f\"}\r\n"				}
, 				{
					"Identifier":"be2ca239-31be-4086-abc3-91ac3f0717bd"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"InputIdentifier\":\"15709a76-5e2e-44ff-9bd9-37c919405282\"\t, \r\n\t\"Identifier\":\"be2ca239-31be-4086-abc3-91ac3f0717bd\"}\r\n"				}
, 				{
					"Identifier":"df6deac8-f294-4e03-8109-5aa1ee3d7de7"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"InputIdentifier\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"Identifier\":\"df6deac8-f294-4e03-8109-5aa1ee3d7de7\"}\r\n"				}
, 				{
					"Identifier":"e3c7fd94-8bbd-45a2-be17-24b2f07df476"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"InputIdentifier\":\"50337321-b0ae-4748-ad2f-b442653b3191\"\t, \r\n\t\"Identifier\":\"e3c7fd94-8bbd-45a2-be17-24b2f07df476\"}\r\n"				}
, 				{
					"Identifier":"ea336dc7-c141-409a-a96a-49b299986504"					, 
					"Data":"{\r\n\t\"OutputIdentifier\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"InputIdentifier\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Identifier\":\"ea336dc7-c141-409a-a96a-49b299986504\"}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Graphs.Data.FilterItem"			, 
			"Records":[ 
				{
					"Identifier":"064e725b-795a-438e-80e8-100efa13b6d7"					, 
					"Data":"{\r\n\t\"Identifier\":\"064e725b-795a-438e-80e8-100efa13b6d7\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"90d0058f-ce26-47c8-b83e-592dfea1b1d2\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":804\t\t, \r\n\t\t\"y\":168\t}\r\n}\r\n"				}
, 				{
					"Identifier":"08753cf8-1393-429d-b46b-95ce14bdcdc2"					, 
					"Data":"{\r\n\t\"Identifier\":\"08753cf8-1393-429d-b46b-95ce14bdcdc2\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"45d30367-166d-4e98-9e41-ad88c2ebfb7e\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":660\t\t, \r\n\t\t\"y\":276\t}\r\n}\r\n"				}
, 				{
					"Identifier":"0f39b0af-d4f5-452c-9c1a-0d3c1ff83681"					, 
					"Data":"{\r\n\t\"Identifier\":\"0f39b0af-d4f5-452c-9c1a-0d3c1ff83681\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"7e91983f-404c-4cf9-a787-b67f83919563\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":1032\t\t, \r\n\t\t\"y\":276\t}\r\n}\r\n"				}
, 				{
					"Identifier":"12c90a7d-50c1-41ac-bc9a-4762925f6f31"					, 
					"Data":"{\r\n\t\"Identifier\":\"12c90a7d-50c1-41ac-bc9a-4762925f6f31\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"3bfa8124-0b20-497b-ba7f-7617ea639a13\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":480\t}\r\n}\r\n"				}
, 				{
					"Identifier":"15dc7d47-ca04-4fd2-9edc-9c959ba56063"					, 
					"Data":"{\r\n\t\"Identifier\":\"15dc7d47-ca04-4fd2-9edc-9c959ba56063\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"FilterId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":72\t\t, \r\n\t\t\"y\":120\t}\r\n}\r\n"				}
, 				{
					"Identifier":"1adc971c-5c2b-43ae-8765-d083724c7493"					, 
					"Data":"{\r\n\t\"Identifier\":\"1adc971c-5c2b-43ae-8765-d083724c7493\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"b3d6c157-78d8-4dda-813d-d784102f271a\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":72\t}\r\n}\r\n"				}
, 				{
					"Identifier":"1e59fc1a-44d6-4fdc-be96-6260462a995e"					, 
					"Data":"{\r\n\t\"Identifier\":\"1e59fc1a-44d6-4fdc-be96-6260462a995e\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"FilterId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":96\t\t, \r\n\t\t\"y\":120\t}\r\n}\r\n"				}
, 				{
					"Identifier":"2624d962-b66a-46ee-adf2-b095c8158685"					, 
					"Data":"{\r\n\t\"Identifier\":\"2624d962-b66a-46ee-adf2-b095c8158685\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"f7f9ae25-a127-4805-95f2-bab5a7997fad\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":804\t\t, \r\n\t\t\"y\":384\t}\r\n}\r\n"				}
, 				{
					"Identifier":"2ef4a10c-d745-47ac-8c93-ee7f38258dac"					, 
					"Data":"{\r\n\t\"Identifier\":\"2ef4a10c-d745-47ac-8c93-ee7f38258dac\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":12\t\t, \r\n\t\t\"y\":24\t}\r\n}\r\n"				}
, 				{
					"Identifier":"43848095-ccf4-4d58-baa0-2e0a370cabda"					, 
					"Data":"{\r\n\t\"Identifier\":\"43848095-ccf4-4d58-baa0-2e0a370cabda\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"FilterId\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":120\t\t, \r\n\t\t\"y\":240\t}\r\n}\r\n"				}
, 				{
					"Identifier":"46789eb0-8d00-438f-8a07-a9c7b3edcd18"					, 
					"Data":"{\r\n\t\"Identifier\":\"46789eb0-8d00-438f-8a07-a9c7b3edcd18\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"ec72d429-62d1-4ea4-ae6c-134d22420de0\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":276\t}\r\n}\r\n"				}
, 				{
					"Identifier":"4ae2364a-b84d-4a52-b4db-49ef3a628841"					, 
					"Data":"{\r\n\t\"Identifier\":\"4ae2364a-b84d-4a52-b4db-49ef3a628841\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"FilterId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":420\t\t, \r\n\t\t\"y\":24\t}\r\n}\r\n"				}
, 				{
					"Identifier":"5ff65fcb-296f-4384-9e2d-5eb3e60f4de3"					, 
					"Data":"{\r\n\t\"Identifier\":\"5ff65fcb-296f-4384-9e2d-5eb3e60f4de3\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"88259a39-1ead-417f-a5c4-54703de274c3\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":396\t}\r\n}\r\n"				}
, 				{
					"Identifier":"619f24d6-06f5-4398-bd8d-7ecd99f48d1f"					, 
					"Data":"{\r\n\t\"Identifier\":\"619f24d6-06f5-4398-bd8d-7ecd99f48d1f\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"edca0673-0553-470b-b5a5-87ab8b8ef927\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":324\t}\r\n}\r\n"				}
, 				{
					"Identifier":"721f8f11-2bb0-4d4e-ab88-afe535efdd07"					, 
					"Data":"{\r\n\t\"Identifier\":\"721f8f11-2bb0-4d4e-ab88-afe535efdd07\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"4f3890d9-7d7d-4819-9cfd-6048de8efd6c\"\t, \r\n\t\"FilterId\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":360\t\t, \r\n\t\t\"y\":240\t}\r\n}\r\n"				}
, 				{
					"Identifier":"79fa0c44-bbe7-4697-9f29-5b353d5a6e85"					, 
					"Data":"{\r\n\t\"Identifier\":\"79fa0c44-bbe7-4697-9f29-5b353d5a6e85\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"31f28c3c-3031-4a7b-9524-3e7607a97cf8\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":132\t}\r\n}\r\n"				}
, 				{
					"Identifier":"7aaa753f-34c4-4ae0-b578-c3c940cca86e"					, 
					"Data":"{\r\n\t\"Identifier\":\"7aaa753f-34c4-4ae0-b578-c3c940cca86e\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"1bc77d5c-76e9-46f3-ad24-c62c5b8e8c9b\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":624\t}\r\n}\r\n"				}
, 				{
					"Identifier":"82f22aaf-6594-47de-b882-c43e72608167"					, 
					"Data":"{\r\n\t\"Identifier\":\"82f22aaf-6594-47de-b882-c43e72608167\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"d1c13c87-d0bd-4cd6-b27d-263f4396db56\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":12\t}\r\n}\r\n"				}
, 				{
					"Identifier":"855a5366-2bf0-4c48-a32f-a6eee992ee62"					, 
					"Data":"{\r\n\t\"Identifier\":\"855a5366-2bf0-4c48-a32f-a6eee992ee62\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"35761be1-7685-4cf5-8ae1-939ef53358b4\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":192\t}\r\n}\r\n"				}
, 				{
					"Identifier":"8ad0431f-db77-4d4f-a201-93be117557a8"					, 
					"Data":"{\r\n\t\"Identifier\":\"8ad0431f-db77-4d4f-a201-93be117557a8\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":312\t\t, \r\n\t\t\"y\":84\t}\r\n}\r\n"				}
, 				{
					"Identifier":"8fa8418d-2a89-43e5-9f09-790d7d9ab944"					, 
					"Data":"{\r\n\t\"Identifier\":\"8fa8418d-2a89-43e5-9f09-790d7d9ab944\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"478bdc50-81e9-450c-8940-098c245cd3d0\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":804\t\t, \r\n\t\t\"y\":312\t}\r\n}\r\n"				}
, 				{
					"Identifier":"910a0fd7-e314-4ba9-a66d-71fd292dd2ce"					, 
					"Data":"{\r\n\t\"Identifier\":\"910a0fd7-e314-4ba9-a66d-71fd292dd2ce\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"2bbb13ce-92e0-4b43-be24-f24e6b28247a\"\t, \r\n\t\"FilterId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":396\t\t, \r\n\t\t\"y\":120\t}\r\n}\r\n"				}
, 				{
					"Identifier":"97e577e8-f3ab-4e66-9024-cd8e2f5544ce"					, 
					"Data":"{\r\n\t\"Identifier\":\"97e577e8-f3ab-4e66-9024-cd8e2f5544ce\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"9606d603-eaae-4724-a5c9-966dc1b2194f\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":660\t\t, \r\n\t\t\"y\":564\t}\r\n}\r\n"				}
, 				{
					"Identifier":"99870407-78bb-41a7-9e15-e899edbc0db8"					, 
					"Data":"{\r\n\t\"Identifier\":\"99870407-78bb-41a7-9e15-e899edbc0db8\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"26b5d4bf-9cb3-4e32-bcee-e6262a025306\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":72\t}\r\n}\r\n"				}
, 				{
					"Identifier":"9ee5c735-0c09-40b3-9f87-16fb957feb82"					, 
					"Data":"{\r\n\t\"Identifier\":\"9ee5c735-0c09-40b3-9f87-16fb957feb82\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"b0c86f2c-01cb-4f18-b764-fac5ef3a61c4\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":444\t}\r\n}\r\n"				}
, 				{
					"Identifier":"a005ef7d-bbd4-4d6b-9f7c-0d93678b49e1"					, 
					"Data":"{\r\n\t\"Identifier\":\"a005ef7d-bbd4-4d6b-9f7c-0d93678b49e1\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":24\t\t, \r\n\t\t\"y\":0\t}\r\n}\r\n"				}
, 				{
					"Identifier":"a4629c7e-3c70-4cc3-8af0-20ffd22050ea"					, 
					"Data":"{\r\n\t\"Identifier\":\"a4629c7e-3c70-4cc3-8af0-20ffd22050ea\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"29dd07e4-d4c6-4c6f-9063-6148a7379f5a\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":804\t\t, \r\n\t\t\"y\":12\t}\r\n}\r\n"				}
, 				{
					"Identifier":"ad85732c-b150-469b-9d56-69041e9a3475"					, 
					"Data":"{\r\n\t\"Identifier\":\"ad85732c-b150-469b-9d56-69041e9a3475\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"FilterId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":84\t\t, \r\n\t\t\"y\":24\t}\r\n}\r\n"				}
, 				{
					"Identifier":"bc3f03e3-a410-406d-b7e2-73c1d3b05660"					, 
					"Data":"{\r\n\t\"Identifier\":\"bc3f03e3-a410-406d-b7e2-73c1d3b05660\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"fddba227-dab9-4534-b190-da8ecf905e55\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":264\t}\r\n}\r\n"				}
, 				{
					"Identifier":"c2512fbc-6391-4169-a180-4f9248c75fd8"					, 
					"Data":"{\r\n\t\"Identifier\":\"c2512fbc-6391-4169-a180-4f9248c75fd8\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"85d129ab-b7c3-4326-a78c-461482364402\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":888\t\t, \r\n\t\t\"y\":384\t}\r\n}\r\n"				}
, 				{
					"Identifier":"c35c47bc-ed95-46fc-9ef7-838496b7d0bc"					, 
					"Data":"{\r\n\t\"Identifier\":\"c35c47bc-ed95-46fc-9ef7-838496b7d0bc\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"ec700535-0834-43e1-ae66-66140331110d\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":768\t}\r\n}\r\n"				}
, 				{
					"Identifier":"c378a394-b2e6-4047-98f5-dda1e8bc9fe9"					, 
					"Data":"{\r\n\t\"Identifier\":\"c378a394-b2e6-4047-98f5-dda1e8bc9fe9\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"450e9db8-018c-444b-a118-663aec791f62\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":312\t\t, \r\n\t\t\"y\":480\t}\r\n}\r\n"				}
, 				{
					"Identifier":"c697cf2a-b5cf-4133-9ed3-ffa30a59b819"					, 
					"Data":"{\r\n\t\"Identifier\":\"c697cf2a-b5cf-4133-9ed3-ffa30a59b819\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":24\t\t, \r\n\t\t\"y\":420\t}\r\n}\r\n"				}
, 				{
					"Identifier":"cb5e5ff3-156d-4fc4-9c8c-b51a82ab9879"					, 
					"Data":"{\r\n\t\"Identifier\":\"cb5e5ff3-156d-4fc4-9c8c-b51a82ab9879\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"215c84d7-3f2b-4091-a69b-a81f0b1cf751\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":552\t\t, \r\n\t\t\"y\":684\t}\r\n}\r\n"				}
, 				{
					"Identifier":"d52143b7-466d-4e5c-bef6-bc29d99e345f"					, 
					"Data":"{\r\n\t\"Identifier\":\"d52143b7-466d-4e5c-bef6-bc29d99e345f\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"a040af48-00a3-465e-8364-68c17792bd19\"\t, \r\n\t\"FilterId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":672\t\t, \r\n\t\t\"y\":300\t}\r\n}\r\n"				}
, 				{
					"Identifier":"da2de3bb-c13c-4da4-b893-ce219e636520"					, 
					"Data":"{\r\n\t\"Identifier\":\"da2de3bb-c13c-4da4-b893-ce219e636520\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"3220f288-0132-4161-8d2f-8404c3900002\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":24\t\t, \r\n\t\t\"y\":132\t}\r\n}\r\n"				}
, 				{
					"Identifier":"dbaa6d6e-e988-4dd5-90bd-c02ef0076ba8"					, 
					"Data":"{\r\n\t\"Identifier\":\"dbaa6d6e-e988-4dd5-90bd-c02ef0076ba8\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":876\t\t, \r\n\t\t\"y\":36\t}\r\n}\r\n"				}
, 				{
					"Identifier":"ebf8a756-52c3-4146-b6b0-84aa4c446877"					, 
					"Data":"{\r\n\t\"Identifier\":\"ebf8a756-52c3-4146-b6b0-84aa4c446877\"\t, \r\n\t\"Collapsed\":true\t, \r\n\t\"NodeId\":\"47bac336-c708-4afe-902b-8bf2522c1e54\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":252\t\t, \r\n\t\t\"y\":12\t}\r\n}\r\n"				}
, 				{
					"Identifier":"ecfd0a4a-b826-49ad-aa45-7c8db69c4d07"					, 
					"Data":"{\r\n\t\"Identifier\":\"ecfd0a4a-b826-49ad-aa45-7c8db69c4d07\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"FilterId\":\"e34a6182-ec96-493c-9c10-336d9f4a6ffa\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":120\t\t, \r\n\t\t\"y\":36\t}\r\n}\r\n"				}
, 				{
					"Identifier":"ed9ca95b-dae3-4fe0-85f8-1b6bcb62988d"					, 
					"Data":"{\r\n\t\"Identifier\":\"ed9ca95b-dae3-4fe0-85f8-1b6bcb62988d\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"70cf21e2-99fa-41dd-9e8a-c79c414e4f23\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":876\t\t, \r\n\t\t\"y\":204\t}\r\n}\r\n"				}
, 				{
					"Identifier":"f1a6d553-b32a-4d46-b46f-0b1748351337"					, 
					"Data":"{\r\n\t\"Identifier\":\"f1a6d553-b32a-4d46-b46f-0b1748351337\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"696d8dda-3cbb-43ec-80cd-ec88bbd662fc\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":660\t\t, \r\n\t\t\"y\":420\t}\r\n}\r\n"				}
, 				{
					"Identifier":"f4e6f284-c4c4-4d69-89e6-56bb1a36cd93"					, 
					"Data":"{\r\n\t\"Identifier\":\"f4e6f284-c4c4-4d69-89e6-56bb1a36cd93\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"1cb34d86-6b9f-4eb0-a198-63a1f3b0ce06\"\t, \r\n\t\"FilterId\":\"ec012b39-6fc7-4fa0-9223-41fcb32d9b16\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":504\t\t, \r\n\t\t\"y\":120\t}\r\n}\r\n"				}
, 				{
					"Identifier":"f613c615-b148-4d12-a618-fa43a30a8e83"					, 
					"Data":"{\r\n\t\"Identifier\":\"f613c615-b148-4d12-a618-fa43a30a8e83\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"bf28584b-0b98-48e0-b113-249d9c8b7fe9\"\t, \r\n\t\"FilterId\":\"0401c728-fae3-443c-9048-65d13d1173d7\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":888\t\t, \r\n\t\t\"y\":576\t}\r\n}\r\n"				}
, 				{
					"Identifier":"f7fe8129-6171-4b23-952c-4ddcc7900ae1"					, 
					"Data":"{\r\n\t\"Identifier\":\"f7fe8129-6171-4b23-952c-4ddcc7900ae1\"\t, \r\n\t\"Collapsed\":false\t, \r\n\t\"NodeId\":\"5e751e8e-62b5-475b-bb47-4ab96229cf19\"\t, \r\n\t\"FilterId\":\"5f86b1e1-0814-4a78-8cca-88351a5ad1e4\"\t, \r\n\t\"Position\":\t{\r\n\t\t\"x\":816\t\t, \r\n\t\t\"y\":468\t}\r\n}\r\n"				}
 ]
		}
, 		{
			"Type":"uFrame.Editor.Workspaces.Data.WorkspaceGraph"			, 
			"Records":[ 
				{
					"Identifier":"3ace1e2a-0b7e-47d8-8bfc-e1fd44e5679b"					, 
					"Data":"{\r\n\t\"GraphId\":\"dd760a51-e191-4bad-a314-6cb872121520\"\t, \r\n\t\"WorkspaceId\":\"027b9de3-8bf4-4dc7-b0d5-908407f431ce\"\t, \r\n\t\"Identifier\":\"3ace1e2a-0b7e-47d8-8bfc-e1fd44e5679b\"}\r\n"				}
 ]
		}
 ]
	, 
	"CodeFiles":[ 
		{
			"RelativePath":"/Enums/BGM.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public enum BGM {\r\n        \r\n        CUSTOM,\r\n        \r\n        NONE,\r\n        \r\n        PLAY,\r\n        \r\n        SAME,\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/Enums/AnimType.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public enum AnimType {\r\n        \r\n        HIDE,\r\n        \r\n        HIDE_BACK,\r\n        \r\n        NO_ANIM,\r\n        \r\n        SHOW,\r\n        \r\n        SHOW_BACK,\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class LoadPanelCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n        \r\n        private String _panelName;\r\n        \r\n        public String panelName {\r\n            get {\r\n                return _panelName;\r\n            }\r\n            set {\r\n                _panelName = value;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public partial class FocusPanelCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n        \r\n        private Boolean _isFocus;\r\n        \r\n        public Boolean isFocus {\r\n            get {\r\n                return _isFocus;\r\n            }\r\n            set {\r\n                _isFocus = value;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public partial class SetPanelDataCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n        \r\n        private object _panelData;\r\n        \r\n        public object panelData {\r\n            get {\r\n                return _panelData;\r\n            }\r\n            set {\r\n                _panelData = value;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public partial class PlayPanelAnimationCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n        \r\n        private AnimType _panelAnimType;\r\n        \r\n        public AnimType panelAnimType {\r\n            get {\r\n                return _panelAnimType;\r\n            }\r\n            set {\r\n                _panelAnimType = value;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public partial class HidePanelCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n    }\r\n    \r\n    public partial class ShowPanelCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n    }\r\n    \r\n    public partial class DestroyPanelCommand : uFrame.MVVM.ViewModels.ViewModelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/LoadPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class LoadPanelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/FocusPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class FocusPanelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/SetPanelDataCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class SetPanelDataCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/PlayPanelAnimationCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class PlayPanelAnimationCommand \r\n    {\r\n        public NoParamCallback onAniFinish = null;\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels.designer/MenuRootViewModel.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class MenuRootViewModelBase : uFrame.MVVM.ViewModels.ViewModel {\r\n        \r\n        private P<ShieldViewModel> _shieldEmptyProperty;\r\n        \r\n        private P<MainMenuViewModel> _mainMenuProperty;\r\n        \r\n        private P<PanelViewModel> _loadingTopProperty;\r\n        \r\n        private P<ShieldViewModel> _shieldTopProperty;\r\n        \r\n        private ModelCollection<ShieldViewModel> _Shields;\r\n        \r\n        private ModelCollection<PanelViewModel> _Panels;\r\n        \r\n        private Signal<LoadPanelCommand> _LoadPanel;\r\n        \r\n        public MenuRootViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n        \r\n        public virtual P<ShieldViewModel> shieldEmptyProperty {\r\n            get {\r\n                return _shieldEmptyProperty;\r\n            }\r\n            set {\r\n                _shieldEmptyProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<MainMenuViewModel> mainMenuProperty {\r\n            get {\r\n                return _mainMenuProperty;\r\n            }\r\n            set {\r\n                _mainMenuProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<PanelViewModel> loadingTopProperty {\r\n            get {\r\n                return _loadingTopProperty;\r\n            }\r\n            set {\r\n                _loadingTopProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<ShieldViewModel> shieldTopProperty {\r\n            get {\r\n                return _shieldTopProperty;\r\n            }\r\n            set {\r\n                _shieldTopProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual ShieldViewModel shieldEmpty {\r\n            get {\r\n                return shieldEmptyProperty.Value;\r\n            }\r\n            set {\r\n                shieldEmptyProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual MainMenuViewModel mainMenu {\r\n            get {\r\n                return mainMenuProperty.Value;\r\n            }\r\n            set {\r\n                mainMenuProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual PanelViewModel loadingTop {\r\n            get {\r\n                return loadingTopProperty.Value;\r\n            }\r\n            set {\r\n                loadingTopProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual ShieldViewModel shieldTop {\r\n            get {\r\n                return shieldTopProperty.Value;\r\n            }\r\n            set {\r\n                shieldTopProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual ModelCollection<ShieldViewModel> Shields {\r\n            get {\r\n                return _Shields;\r\n            }\r\n            set {\r\n                _Shields = value;\r\n            }\r\n        }\r\n        \r\n        public virtual ModelCollection<PanelViewModel> Panels {\r\n            get {\r\n                return _Panels;\r\n            }\r\n            set {\r\n                _Panels = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<LoadPanelCommand> LoadPanel {\r\n            get {\r\n                return _LoadPanel;\r\n            }\r\n            set {\r\n                _LoadPanel = value;\r\n            }\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            this.LoadPanel = new Signal<LoadPanelCommand>(this);\r\n            _shieldEmptyProperty = new P<ShieldViewModel>(this, \"shieldEmpty\");\r\n            _mainMenuProperty = new P<MainMenuViewModel>(this, \"mainMenu\");\r\n            _loadingTopProperty = new P<PanelViewModel>(this, \"loadingTop\");\r\n            _shieldTopProperty = new P<ShieldViewModel>(this, \"shieldTop\");\r\n            _Shields = new ModelCollection<ShieldViewModel>(this, \"Shields\");\r\n            _Panels = new ModelCollection<PanelViewModel>(this, \"Panels\");\r\n        }\r\n        \r\n        public virtual void Execute(LoadPanelCommand argument) {\r\n            this.LoadPanel.OnNext(argument);\r\n        }\r\n        \r\n        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Read(stream);\r\n            \t\tif (stream.DeepSerialize) this.shieldEmpty = stream.DeserializeObject<ShieldViewModel>(\"shieldEmpty\");;\r\n            \t\tif (stream.DeepSerialize) this.mainMenu = stream.DeserializeObject<MainMenuViewModel>(\"mainMenu\");;\r\n            \t\tif (stream.DeepSerialize) this.loadingTop = stream.DeserializeObject<PanelViewModel>(\"loadingTop\");;\r\n            \t\tif (stream.DeepSerialize) this.shieldTop = stream.DeserializeObject<ShieldViewModel>(\"shieldTop\");;\r\n            if (stream.DeepSerialize) {\r\n                this.Shields.Clear();\r\n                this.Shields.AddRange(stream.DeserializeObjectArray<ShieldViewModel>(\"Shields\"));\r\n            }\r\n            if (stream.DeepSerialize) {\r\n                this.Panels.Clear();\r\n                this.Panels.AddRange(stream.DeserializeObjectArray<PanelViewModel>(\"Panels\"));\r\n            }\r\n        }\r\n        \r\n        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Write(stream);\r\n            if (stream.DeepSerialize) stream.SerializeObject(\"shieldEmpty\", this.shieldEmpty);;\r\n            if (stream.DeepSerialize) stream.SerializeObject(\"mainMenu\", this.mainMenu);;\r\n            if (stream.DeepSerialize) stream.SerializeObject(\"loadingTop\", this.loadingTop);;\r\n            if (stream.DeepSerialize) stream.SerializeObject(\"shieldTop\", this.shieldTop);;\r\n            if (stream.DeepSerialize) stream.SerializeArray(\"Shields\", this.Shields);\r\n            if (stream.DeepSerialize) stream.SerializeArray(\"Panels\", this.Panels);\r\n        }\r\n        \r\n        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {\r\n            base.FillCommands(list);\r\n            list.Add(new ViewModelCommandInfo(\"LoadPanel\", LoadPanel) { ParameterType = typeof(LoadPanelCommand) });\r\n        }\r\n        \r\n        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {\r\n            base.FillProperties(list);\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_shieldEmptyProperty, true, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_mainMenuProperty, true, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_loadingTopProperty, true, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_shieldTopProperty, true, false, false, false));\r\n            list.Add(new ViewModelPropertyInfo(_Shields, true, true, false, false));\r\n            list.Add(new ViewModelPropertyInfo(_Panels, true, true, false, false));\r\n        }\r\n    }\r\n    \r\n    public partial class MenuRootViewModel {\r\n        \r\n        public MenuRootViewModel(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels/MenuRootViewModel.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n\r\n    public delegate void OnLoadedDelegate(PanelViewModel root);\r\n    public enum Bgm\r\n    {\r\n        /// <summary>\r\n        /// When the scene changed, turn off BGM.\r\n        /// </summary>\r\n        NONE,\r\n\r\n        /// <summary>\r\n        /// When the scene changed, BGM will not be changed.\r\n        /// </summary>\r\n        SAME,\r\n\r\n        /// <summary>\r\n        /// When the scene changed, play a new BGM.\r\n        /// </summary>\r\n        PLAY,\r\n\r\n        /// <summary>\r\n        /// When the scene changed, turn off BGM.\r\n        /// You will play BGM by your own code.\r\n        /// You must to set the BgmName for SSController.\r\n        /// </summary>\r\n        CUSTOM\r\n    }\r\n\r\n    public class CallbackData\r\n    {\r\n        public float TimeOut { get; private set; }\r\n        public NoParamCallback Callback { get; private set; }\r\n\r\n        public CallbackData(float timeOut, NoParamCallback callBack)\r\n        {\r\n            TimeOut = timeOut;\r\n            Callback = callBack;\r\n        }\r\n    }\r\n\r\n    public partial class MenuRootViewModel : MenuRootViewModelBase\r\n    {\r\n        #region Delegate\r\n        public delegate void OnScreenStartChangeDelegate(string sceneName);\r\n        public delegate void OnSceneActivedDelegate(string sceneName);\r\n        #endregion\r\n\r\n        #region Event\r\n        public OnScreenStartChangeDelegate onScreenStartChange;\r\n        public OnSceneActivedDelegate onSceneFocus;\r\n        #endregion\r\n\r\n        public string m_LoadingPanelName;\r\n        public string m_FirstScreenName;\r\n        public string m_HomeScreenName;\r\n        public Color m_DefaultShieldColor = new Color(1, 1, 1, 0f);\r\n        public int m_SceneDistance = 0;\r\n        public bool m_IsLoadAsync;\r\n        public bool m_ClearOnLoad;\r\n        public bool m_IsAllAdditive;\r\n        public List<string> m_NotAdditivePanelList = new List<string>();\r\n\r\n        public Stack<string> m_StackPopUp = new Stack<string>();\t\t\t\t\t\t// Popup stack\r\n        public Stack<string> m_CurrentStackScreen = new Stack<string>();\t\t\t\t// Popup stack\r\n        public List<GameObject> m_ListShield = new List<GameObject>();\t\t\t\t\t// List Shield\r\n        public Dictionary<string, PanelViewModel> m_DictAllPanel = new Dictionary<string, PanelViewModel>();\t// Dictionary of loaded panel\r\n        public Dictionary<string, Stack<string>> m_DictScreen = new Dictionary<string, Stack<string>>();\t// Screen dict\r\n\r\n        public int m_LoadingCount;\t\t\t// Loading counter\r\n        public int m_ShieldEmptyCount;\t\t// Shield empty counter\r\n        public bool m_IsBusy;\t\t\t\t// Busy when scene is loading or scene-animation is playing\r\n        public bool m_CanClose;\t\t\t\t// Force able to close even busy\r\n        public string m_GlobalBGM;\t\t\t// Global BGM\r\n\r\n        public Dictionary<string, OnLoadedDelegate> m_OnLoaded = new Dictionary<string, OnLoadedDelegate>();\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers.designer/MenuRootController.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public class MenuRootControllerBase : uFrame.MVVM.Controller {\r\n        \r\n        private uFrame.MVVM.ViewModels.IViewModelManager _MenuRootViewModelManager;\r\n        \r\n        private MenuRootViewModel _MenuRoot;\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"MenuRoot\")]\r\n        public uFrame.MVVM.ViewModels.IViewModelManager MenuRootViewModelManager {\r\n            get {\r\n                return _MenuRootViewModelManager;\r\n            }\r\n            set {\r\n                _MenuRootViewModelManager = value;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"MenuRoot\")]\r\n        public MenuRootViewModel MenuRoot {\r\n            get {\r\n                return _MenuRoot;\r\n            }\r\n            set {\r\n                _MenuRoot = value;\r\n            }\r\n        }\r\n        \r\n        public IEnumerable<MenuRootViewModel> MenuRootViewModels {\r\n            get {\r\n                return MenuRootViewModelManager.OfType<MenuRootViewModel>();\r\n            }\r\n        }\r\n        \r\n        public override void Setup() {\r\n            base.Setup();\r\n            // This is called when the controller is created\r\n        }\r\n        \r\n        public override void Initialize(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.Initialize(viewModel);\r\n            // This is called when a viewmodel is created\r\n            this.InitializeMenuRoot(((MenuRootViewModel)(viewModel)));\r\n        }\r\n        \r\n        public virtual MenuRootViewModel CreateMenuRoot() {\r\n            return ((MenuRootViewModel)(this.Create(Guid.NewGuid().ToString())));\r\n        }\r\n        \r\n        public override uFrame.MVVM.ViewModels.ViewModel CreateEmpty() {\r\n            return new MenuRootViewModel(this.EventAggregator);\r\n        }\r\n        \r\n        public virtual void InitializeMenuRoot(MenuRootViewModel viewModel) {\r\n            // This is called when a MenuRootViewModel is created\r\n            viewModel.LoadPanel.Action = this.LoadPanelHandler;\r\n            MenuRootViewModelManager.Add(viewModel);\r\n        }\r\n        \r\n        public override void DisposingViewModel(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.DisposingViewModel(viewModel);\r\n            MenuRootViewModelManager.Remove(viewModel);\r\n        }\r\n        \r\n        public virtual void LoadPanelHandler(LoadPanelCommand command) {\r\n            this.LoadPanel(command.Sender as MenuRootViewModel, command);\r\n        }\r\n        \r\n        public virtual void LoadPanel(MenuRootViewModel viewModel, LoadPanelCommand arg) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers/MenuRootController.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n\r\n\r\n    public class MenuRootController : MenuRootControllerBase\r\n    {\r\n\r\n        public override void InitializeMenuRoot(MenuRootViewModel viewModel)\r\n        {\r\n            base.InitializeMenuRoot(viewModel);\r\n            // This is called when a MenuRootViewModel is created\r\n\r\n            viewModel.m_LoadingPanelName = \"Loading\";\r\n        }\r\n\r\n        public override void LoadPanel(MenuRootViewModel viewModel, LoadPanelCommand arg)\r\n        {\r\n            base.LoadPanel(viewModel, arg);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels.designer/ShieldViewModel.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class ShieldViewModelBase : PanelViewModel {\r\n        \r\n        private P<Color> _colorProperty;\r\n        \r\n        public ShieldViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n        \r\n        public virtual P<Color> colorProperty {\r\n            get {\r\n                return _colorProperty;\r\n            }\r\n            set {\r\n                _colorProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Color color {\r\n            get {\r\n                return colorProperty.Value;\r\n            }\r\n            set {\r\n                colorProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            _colorProperty = new P<Color>(this, \"color\");\r\n        }\r\n        \r\n        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Read(stream);\r\n        }\r\n        \r\n        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Write(stream);\r\n        }\r\n        \r\n        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {\r\n            base.FillCommands(list);\r\n        }\r\n        \r\n        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {\r\n            base.FillProperties(list);\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_colorProperty, false, false, false, false));\r\n        }\r\n    }\r\n    \r\n    public partial class ShieldViewModel {\r\n        \r\n        public ShieldViewModel(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels/ShieldViewModel.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class ShieldViewModel : ShieldViewModelBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers.designer/ShieldController.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class ShieldControllerBase : PanelController {\r\n        \r\n        private uFrame.MVVM.ViewModels.IViewModelManager _ShieldViewModelManager;\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"Shield\")]\r\n        public uFrame.MVVM.ViewModels.IViewModelManager ShieldViewModelManager {\r\n            get {\r\n                return _ShieldViewModelManager;\r\n            }\r\n            set {\r\n                _ShieldViewModelManager = value;\r\n            }\r\n        }\r\n        \r\n        public IEnumerable<ShieldViewModel> ShieldViewModels {\r\n            get {\r\n                return ShieldViewModelManager.OfType<ShieldViewModel>();\r\n            }\r\n        }\r\n        \r\n        public override void Setup() {\r\n            base.Setup();\r\n            // This is called when the controller is created\r\n        }\r\n        \r\n        public override void Initialize(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.Initialize(viewModel);\r\n            // This is called when a viewmodel is created\r\n            this.InitializeShield(((ShieldViewModel)(viewModel)));\r\n        }\r\n        \r\n        public virtual ShieldViewModel CreateShield() {\r\n            return ((ShieldViewModel)(this.Create(Guid.NewGuid().ToString())));\r\n        }\r\n        \r\n        public override uFrame.MVVM.ViewModels.ViewModel CreateEmpty() {\r\n            return new ShieldViewModel(this.EventAggregator);\r\n        }\r\n        \r\n        public virtual void InitializeShield(ShieldViewModel viewModel) {\r\n            // This is called when a ShieldViewModel is created\r\n            ShieldViewModelManager.Add(viewModel);\r\n        }\r\n        \r\n        public override void DisposingViewModel(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.DisposingViewModel(viewModel);\r\n            ShieldViewModelManager.Remove(viewModel);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers/ShieldController.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class ShieldController : ShieldControllerBase {\r\n        \r\n        public override void InitializeShield(ShieldViewModel viewModel) {\r\n            base.InitializeShield(viewModel);\r\n            // This is called when a ShieldViewModel is created\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels.designer/MainMenuViewModel.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class MainMenuViewModelBase : PanelViewModel {\r\n        \r\n        public MainMenuViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n        }\r\n        \r\n        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Read(stream);\r\n        }\r\n        \r\n        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Write(stream);\r\n        }\r\n        \r\n        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {\r\n            base.FillCommands(list);\r\n        }\r\n        \r\n        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {\r\n            base.FillProperties(list);\r\n        }\r\n    }\r\n    \r\n    public partial class MainMenuViewModel {\r\n        \r\n        public MainMenuViewModel(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels/MainMenuViewModel.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class MainMenuViewModel : MainMenuViewModelBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers.designer/MainMenuController.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public class MainMenuControllerBase : PanelController {\r\n        \r\n        private uFrame.MVVM.ViewModels.IViewModelManager _MainMenuViewModelManager;\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"MainMenu\")]\r\n        public uFrame.MVVM.ViewModels.IViewModelManager MainMenuViewModelManager {\r\n            get {\r\n                return _MainMenuViewModelManager;\r\n            }\r\n            set {\r\n                _MainMenuViewModelManager = value;\r\n            }\r\n        }\r\n        \r\n        public IEnumerable<MainMenuViewModel> MainMenuViewModels {\r\n            get {\r\n                return MainMenuViewModelManager.OfType<MainMenuViewModel>();\r\n            }\r\n        }\r\n        \r\n        public override void Setup() {\r\n            base.Setup();\r\n            // This is called when the controller is created\r\n        }\r\n        \r\n        public override void Initialize(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.Initialize(viewModel);\r\n            // This is called when a viewmodel is created\r\n            this.InitializeMainMenu(((MainMenuViewModel)(viewModel)));\r\n        }\r\n        \r\n        public virtual MainMenuViewModel CreateMainMenu() {\r\n            return ((MainMenuViewModel)(this.Create(Guid.NewGuid().ToString())));\r\n        }\r\n        \r\n        public override uFrame.MVVM.ViewModels.ViewModel CreateEmpty() {\r\n            return new MainMenuViewModel(this.EventAggregator);\r\n        }\r\n        \r\n        public virtual void InitializeMainMenu(MainMenuViewModel viewModel) {\r\n            // This is called when a MainMenuViewModel is created\r\n            MainMenuViewModelManager.Add(viewModel);\r\n        }\r\n        \r\n        public override void DisposingViewModel(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.DisposingViewModel(viewModel);\r\n            MainMenuViewModelManager.Remove(viewModel);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers/MainMenuController.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public class MainMenuController : MainMenuControllerBase {\r\n        \r\n        public override void InitializeMainMenu(MainMenuViewModel viewModel) {\r\n            base.InitializeMainMenu(viewModel);\r\n            // This is called when a MainMenuViewModel is created\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels.designer/PanelViewModel.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class PanelViewModelBase : uFrame.MVVM.ViewModels.ViewModel {\r\n        \r\n        private P<Single> _depthIndexProperty;\r\n        \r\n        private P<String> _panelNameProperty;\r\n        \r\n        private P<Boolean> _isCacheProperty;\r\n        \r\n        private P<BGM> _BGMTypeProperty;\r\n        \r\n        private P<String> _CurrentBGMProperty;\r\n        \r\n        private P<Boolean> _isActiveProperty;\r\n        \r\n        private P<String> _BGMNameProperty;\r\n        \r\n        private P<Int32> _posIndexProperty;\r\n        \r\n        private Signal<FocusPanelCommand> _FocusPanel;\r\n        \r\n        private Signal<HidePanelCommand> _HidePanel;\r\n        \r\n        private Signal<ShowPanelCommand> _ShowPanel;\r\n        \r\n        private Signal<SetPanelDataCommand> _SetPanelData;\r\n        \r\n        private Signal<PlayPanelAnimationCommand> _PlayPanelAnimation;\r\n        \r\n        private Signal<DestroyPanelCommand> _DestroyPanel;\r\n        \r\n        public PanelViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n        \r\n        public virtual P<Single> depthIndexProperty {\r\n            get {\r\n                return _depthIndexProperty;\r\n            }\r\n            set {\r\n                _depthIndexProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<String> panelNameProperty {\r\n            get {\r\n                return _panelNameProperty;\r\n            }\r\n            set {\r\n                _panelNameProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<Boolean> isCacheProperty {\r\n            get {\r\n                return _isCacheProperty;\r\n            }\r\n            set {\r\n                _isCacheProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<BGM> BGMTypeProperty {\r\n            get {\r\n                return _BGMTypeProperty;\r\n            }\r\n            set {\r\n                _BGMTypeProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<String> CurrentBGMProperty {\r\n            get {\r\n                return _CurrentBGMProperty;\r\n            }\r\n            set {\r\n                _CurrentBGMProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<Boolean> isActiveProperty {\r\n            get {\r\n                return _isActiveProperty;\r\n            }\r\n            set {\r\n                _isActiveProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<String> BGMNameProperty {\r\n            get {\r\n                return _BGMNameProperty;\r\n            }\r\n            set {\r\n                _BGMNameProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual P<Int32> posIndexProperty {\r\n            get {\r\n                return _posIndexProperty;\r\n            }\r\n            set {\r\n                _posIndexProperty = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Single depthIndex {\r\n            get {\r\n                return depthIndexProperty.Value;\r\n            }\r\n            set {\r\n                depthIndexProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual String panelName {\r\n            get {\r\n                return panelNameProperty.Value;\r\n            }\r\n            set {\r\n                panelNameProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Boolean isCache {\r\n            get {\r\n                return isCacheProperty.Value;\r\n            }\r\n            set {\r\n                isCacheProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual BGM BGMType {\r\n            get {\r\n                return BGMTypeProperty.Value;\r\n            }\r\n            set {\r\n                BGMTypeProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual String CurrentBGM {\r\n            get {\r\n                return CurrentBGMProperty.Value;\r\n            }\r\n            set {\r\n                CurrentBGMProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Boolean isActive {\r\n            get {\r\n                return isActiveProperty.Value;\r\n            }\r\n            set {\r\n                isActiveProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual String BGMName {\r\n            get {\r\n                return BGMNameProperty.Value;\r\n            }\r\n            set {\r\n                BGMNameProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Int32 posIndex {\r\n            get {\r\n                return posIndexProperty.Value;\r\n            }\r\n            set {\r\n                posIndexProperty.Value = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<FocusPanelCommand> FocusPanel {\r\n            get {\r\n                return _FocusPanel;\r\n            }\r\n            set {\r\n                _FocusPanel = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<HidePanelCommand> HidePanel {\r\n            get {\r\n                return _HidePanel;\r\n            }\r\n            set {\r\n                _HidePanel = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<ShowPanelCommand> ShowPanel {\r\n            get {\r\n                return _ShowPanel;\r\n            }\r\n            set {\r\n                _ShowPanel = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<SetPanelDataCommand> SetPanelData {\r\n            get {\r\n                return _SetPanelData;\r\n            }\r\n            set {\r\n                _SetPanelData = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<PlayPanelAnimationCommand> PlayPanelAnimation {\r\n            get {\r\n                return _PlayPanelAnimation;\r\n            }\r\n            set {\r\n                _PlayPanelAnimation = value;\r\n            }\r\n        }\r\n        \r\n        public virtual Signal<DestroyPanelCommand> DestroyPanel {\r\n            get {\r\n                return _DestroyPanel;\r\n            }\r\n            set {\r\n                _DestroyPanel = value;\r\n            }\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            this.FocusPanel = new Signal<FocusPanelCommand>(this);\r\n            this.HidePanel = new Signal<HidePanelCommand>(this);\r\n            this.ShowPanel = new Signal<ShowPanelCommand>(this);\r\n            this.SetPanelData = new Signal<SetPanelDataCommand>(this);\r\n            this.PlayPanelAnimation = new Signal<PlayPanelAnimationCommand>(this);\r\n            this.DestroyPanel = new Signal<DestroyPanelCommand>(this);\r\n            _depthIndexProperty = new P<Single>(this, \"depthIndex\");\r\n            _panelNameProperty = new P<String>(this, \"panelName\");\r\n            _isCacheProperty = new P<Boolean>(this, \"isCache\");\r\n            _BGMTypeProperty = new P<BGM>(this, \"BGMType\");\r\n            _CurrentBGMProperty = new P<String>(this, \"CurrentBGM\");\r\n            _isActiveProperty = new P<Boolean>(this, \"isActive\");\r\n            _BGMNameProperty = new P<String>(this, \"BGMName\");\r\n            _posIndexProperty = new P<Int32>(this, \"posIndex\");\r\n        }\r\n        \r\n        public virtual void ExecuteHidePanel() {\r\n            this.HidePanel.OnNext(new HidePanelCommand());\r\n        }\r\n        \r\n        public virtual void ExecuteShowPanel() {\r\n            this.ShowPanel.OnNext(new ShowPanelCommand());\r\n        }\r\n        \r\n        public virtual void ExecuteDestroyPanel() {\r\n            this.DestroyPanel.OnNext(new DestroyPanelCommand());\r\n        }\r\n        \r\n        public virtual void Execute(FocusPanelCommand argument) {\r\n            this.FocusPanel.OnNext(argument);\r\n        }\r\n        \r\n        public virtual void Execute(SetPanelDataCommand argument) {\r\n            this.SetPanelData.OnNext(argument);\r\n        }\r\n        \r\n        public virtual void Execute(PlayPanelAnimationCommand argument) {\r\n            this.PlayPanelAnimation.OnNext(argument);\r\n        }\r\n        \r\n        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Read(stream);\r\n            this.depthIndex = stream.DeserializeFloat(\"depthIndex\");;\r\n            this.panelName = stream.DeserializeString(\"panelName\");;\r\n            this.isCache = stream.DeserializeBool(\"isCache\");;\r\n            this.BGMType = (BGM)stream.DeserializeInt(\"BGMType\");;\r\n            this.CurrentBGM = stream.DeserializeString(\"CurrentBGM\");;\r\n            this.isActive = stream.DeserializeBool(\"isActive\");;\r\n            this.BGMName = stream.DeserializeString(\"BGMName\");;\r\n            this.posIndex = stream.DeserializeInt(\"posIndex\");;\r\n        }\r\n        \r\n        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {\r\n            base.Write(stream);\r\n            stream.SerializeFloat(\"depthIndex\", this.depthIndex);\r\n            stream.SerializeString(\"panelName\", this.panelName);\r\n            stream.SerializeBool(\"isCache\", this.isCache);\r\n            stream.SerializeInt(\"BGMType\", (int)this.BGMType);;\r\n            stream.SerializeString(\"CurrentBGM\", this.CurrentBGM);\r\n            stream.SerializeBool(\"isActive\", this.isActive);\r\n            stream.SerializeString(\"BGMName\", this.BGMName);\r\n            stream.SerializeInt(\"posIndex\", this.posIndex);\r\n        }\r\n        \r\n        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {\r\n            base.FillCommands(list);\r\n            list.Add(new ViewModelCommandInfo(\"FocusPanel\", FocusPanel) { ParameterType = typeof(FocusPanelCommand) });\r\n            list.Add(new ViewModelCommandInfo(\"HidePanel\", HidePanel) { ParameterType = typeof(void) });\r\n            list.Add(new ViewModelCommandInfo(\"ShowPanel\", ShowPanel) { ParameterType = typeof(void) });\r\n            list.Add(new ViewModelCommandInfo(\"SetPanelData\", SetPanelData) { ParameterType = typeof(SetPanelDataCommand) });\r\n            list.Add(new ViewModelCommandInfo(\"PlayPanelAnimation\", PlayPanelAnimation) { ParameterType = typeof(PlayPanelAnimationCommand) });\r\n            list.Add(new ViewModelCommandInfo(\"DestroyPanel\", DestroyPanel) { ParameterType = typeof(void) });\r\n        }\r\n        \r\n        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {\r\n            base.FillProperties(list);\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_depthIndexProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_panelNameProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_isCacheProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_BGMTypeProperty, false, false, true, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_CurrentBGMProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_isActiveProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_BGMNameProperty, false, false, false, false));\r\n            // PropertiesChildItem\r\n            list.Add(new ViewModelPropertyInfo(_posIndexProperty, false, false, false, false));\r\n        }\r\n    }\r\n    \r\n    public partial class PanelViewModel {\r\n        \r\n        public PanelViewModel(uFrame.Kernel.IEventAggregator aggregator) : \r\n                base(aggregator) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModels/PanelViewModel.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public partial class PanelViewModel : PanelViewModelBase \r\n    {\r\n        public PanelCallBackDelegate onActive = null;\r\n        public PanelCallBackDelegate onDeactive = null;\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers.designer/PanelController.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public class PanelControllerBase : uFrame.MVVM.Controller {\r\n        \r\n        private uFrame.MVVM.ViewModels.IViewModelManager _PanelViewModelManager;\r\n        \r\n        private MenuRootViewModel _MenuRoot;\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"Panel\")]\r\n        public uFrame.MVVM.ViewModels.IViewModelManager PanelViewModelManager {\r\n            get {\r\n                return _PanelViewModelManager;\r\n            }\r\n            set {\r\n                _PanelViewModelManager = value;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"MenuRoot\")]\r\n        public MenuRootViewModel MenuRoot {\r\n            get {\r\n                return _MenuRoot;\r\n            }\r\n            set {\r\n                _MenuRoot = value;\r\n            }\r\n        }\r\n        \r\n        public IEnumerable<PanelViewModel> PanelViewModels {\r\n            get {\r\n                return PanelViewModelManager.OfType<PanelViewModel>();\r\n            }\r\n        }\r\n        \r\n        public override void Setup() {\r\n            base.Setup();\r\n            // This is called when the controller is created\r\n        }\r\n        \r\n        public override void Initialize(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.Initialize(viewModel);\r\n            // This is called when a viewmodel is created\r\n            this.InitializePanel(((PanelViewModel)(viewModel)));\r\n        }\r\n        \r\n        public virtual PanelViewModel CreatePanel() {\r\n            return ((PanelViewModel)(this.Create(Guid.NewGuid().ToString())));\r\n        }\r\n        \r\n        public override uFrame.MVVM.ViewModels.ViewModel CreateEmpty() {\r\n            return new PanelViewModel(this.EventAggregator);\r\n        }\r\n        \r\n        public virtual void InitializePanel(PanelViewModel viewModel) {\r\n            // This is called when a PanelViewModel is created\r\n            viewModel.FocusPanel.Action = this.FocusPanelHandler;\r\n            viewModel.HidePanel.Action = this.HidePanelHandler;\r\n            viewModel.ShowPanel.Action = this.ShowPanelHandler;\r\n            viewModel.SetPanelData.Action = this.SetPanelDataHandler;\r\n            viewModel.PlayPanelAnimation.Action = this.PlayPanelAnimationHandler;\r\n            viewModel.DestroyPanel.Action = this.DestroyPanelHandler;\r\n            PanelViewModelManager.Add(viewModel);\r\n        }\r\n        \r\n        public override void DisposingViewModel(uFrame.MVVM.ViewModels.ViewModel viewModel) {\r\n            base.DisposingViewModel(viewModel);\r\n            PanelViewModelManager.Remove(viewModel);\r\n        }\r\n        \r\n        public virtual void HidePanel(PanelViewModel viewModel) {\r\n        }\r\n        \r\n        public virtual void ShowPanel(PanelViewModel viewModel) {\r\n        }\r\n        \r\n        public virtual void DestroyPanel(PanelViewModel viewModel) {\r\n        }\r\n        \r\n        public virtual void FocusPanelHandler(FocusPanelCommand command) {\r\n            this.FocusPanel(command.Sender as PanelViewModel, command);\r\n        }\r\n        \r\n        public virtual void HidePanelHandler(HidePanelCommand command) {\r\n            this.HidePanel(command.Sender as PanelViewModel);\r\n        }\r\n        \r\n        public virtual void ShowPanelHandler(ShowPanelCommand command) {\r\n            this.ShowPanel(command.Sender as PanelViewModel);\r\n        }\r\n        \r\n        public virtual void SetPanelDataHandler(SetPanelDataCommand command) {\r\n            this.SetPanelData(command.Sender as PanelViewModel, command);\r\n        }\r\n        \r\n        public virtual void PlayPanelAnimationHandler(PlayPanelAnimationCommand command) {\r\n            this.PlayPanelAnimation(command.Sender as PanelViewModel, command);\r\n        }\r\n        \r\n        public virtual void DestroyPanelHandler(DestroyPanelCommand command) {\r\n            this.DestroyPanel(command.Sender as PanelViewModel);\r\n        }\r\n        \r\n        public virtual void FocusPanel(PanelViewModel viewModel, FocusPanelCommand arg) {\r\n        }\r\n        \r\n        public virtual void SetPanelData(PanelViewModel viewModel, SetPanelDataCommand arg) {\r\n        }\r\n        \r\n        public virtual void PlayPanelAnimation(PanelViewModel viewModel, PlayPanelAnimationCommand arg) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Controllers/PanelController.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    \r\n    \r\n    public class PanelController : PanelControllerBase {\r\n        \r\n        public override void InitializePanel(PanelViewModel viewModel) {\r\n            base.InitializePanel(viewModel);\r\n            // This is called when a PanelViewModel is created\r\n        }\r\n\r\n        public override void FocusPanel(PanelViewModel viewModel, FocusPanelCommand arg)\r\n        {\r\n            base.FocusPanel(viewModel, arg);\r\n        }\r\n\r\n\r\n        public override void HidePanel(PanelViewModel viewModel) {\r\n            base.HidePanel(viewModel);\r\n        }\r\n        \r\n        public override void ShowPanel(PanelViewModel viewModel) {\r\n            base.ShowPanel(viewModel);\r\n        }\r\n        \r\n        public override void PlayPanelAnimation(PanelViewModel viewModel, PlayPanelAnimationCommand arg)\r\n        {\r\n            base.PlayPanelAnimation(viewModel, arg);\r\n        }\r\n\r\n        public override void SetPanelData(PanelViewModel viewModel, SetPanelDataCommand arg)\r\n        {\r\n            base.SetPanelData(viewModel, arg);\r\n        }\r\n\r\n        public override void DestroyPanel(PanelViewModel viewModel)\r\n        {\r\n            base.DestroyPanel(viewModel);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/HidePanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class HidePanelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/ShowPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class ShowPanelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/ViewModelCommands/DestroyPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    \r\n    \r\n    public partial class DestroyPanelCommand {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Services.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.MVVM;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MenuServiceBase : uFrame.Kernel.SystemServiceMonoBehavior {\r\n        \r\n        public override void Setup() {\r\n            base.Setup();\r\n            this.OnEvent<OpenScreenCommand>().Subscribe(this.OpenScreenCommandHandler);\r\n            this.OnEvent<DestoryInactivePanelsCommand>().Subscribe(this.DestoryInactivePanelsCommandHandler);\r\n            this.OnEvent<HideMainMenuCommand>().Subscribe(this.HideMainMenuCommandHandler);\r\n            this.OnEvent<PreLoadPanelCommand>().Subscribe(this.PreLoadPanelCommandHandler);\r\n            this.OnEvent<ClosePanelCommand>().Subscribe(this.ClosePanelCommandHandler);\r\n            this.OnEvent<ShowMainMenuCommand>().Subscribe(this.ShowMainMenuCommandHandler);\r\n            this.OnEvent<OpenMainMenuCommand>().Subscribe(this.OpenMainMenuCommandHandler);\r\n            this.OnEvent<CreateLoadingCommand>().Subscribe(this.CreateLoadingCommandHandler);\r\n            this.OnEvent<ShowLoadingCommand>().Subscribe(this.ShowLoadingCommandHandler);\r\n            this.OnEvent<HideLoadingCommand>().Subscribe(this.HideLoadingCommandHandler);\r\n            this.OnEvent<OpenSubScreenCommand>().Subscribe(this.OpenSubScreenCommandHandler);\r\n            this.OnEvent<GoHomeScreenCommand>().Subscribe(this.GoHomeScreenCommandHandler);\r\n            this.OnEvent<OpenPopupCommand>().Subscribe(this.OpenPopupCommandHandler);\r\n            this.OnEvent<ResetPanelCommand>().Subscribe(this.ResetPanelCommandHandler);\r\n            this.OnEvent<PanelUnloadEvent>().Subscribe(this.PanelUnloadEventHandler);\r\n            this.OnEvent<PanelLoadedEvent>().Subscribe(this.PanelLoadedEventHandler);\r\n        }\r\n        \r\n        public virtual void OpenScreenCommandHandler(OpenScreenCommand data) {\r\n        }\r\n        \r\n        public virtual void DestoryInactivePanelsCommandHandler(DestoryInactivePanelsCommand data) {\r\n        }\r\n        \r\n        public virtual void HideMainMenuCommandHandler(HideMainMenuCommand data) {\r\n        }\r\n        \r\n        public virtual void PreLoadPanelCommandHandler(PreLoadPanelCommand data) {\r\n        }\r\n        \r\n        public virtual void ClosePanelCommandHandler(ClosePanelCommand data) {\r\n        }\r\n        \r\n        public virtual void ShowMainMenuCommandHandler(ShowMainMenuCommand data) {\r\n        }\r\n        \r\n        public virtual void OpenMainMenuCommandHandler(OpenMainMenuCommand data) {\r\n        }\r\n        \r\n        public virtual void CreateLoadingCommandHandler(CreateLoadingCommand data) {\r\n        }\r\n        \r\n        public virtual void ShowLoadingCommandHandler(ShowLoadingCommand data) {\r\n        }\r\n        \r\n        public virtual void HideLoadingCommandHandler(HideLoadingCommand data) {\r\n        }\r\n        \r\n        public virtual void OpenSubScreenCommandHandler(OpenSubScreenCommand data) {\r\n        }\r\n        \r\n        public virtual void GoHomeScreenCommandHandler(GoHomeScreenCommand data) {\r\n        }\r\n        \r\n        public virtual void OpenPopupCommandHandler(OpenPopupCommand data) {\r\n        }\r\n        \r\n        public virtual void ResetPanelCommandHandler(ResetPanelCommand data) {\r\n        }\r\n        \r\n        public virtual void PanelUnloadEventHandler(PanelUnloadEvent data) {\r\n        }\r\n        \r\n        public virtual void PanelLoadedEventHandler(PanelLoadedEvent data) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Services/MenuService.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.MVVM;\r\n    using UniRx;\r\n    using UnityEngine;\r\n\r\n    #region Delgate\r\n    public delegate void PanelCallBackDelegate(PanelViewModel viewModel);\r\n    public delegate void NoParamCallback();\r\n    #endregion\r\n\r\n    public class MenuService : MenuServiceBase\r\n    {\r\n\r\n        [Inject(\"MenuRoot\")]\r\n        public MenuRootViewModel MenuRoot;\r\n\r\n        [Inject]\r\n        public PanelController panelController;\r\n        [Inject]\r\n        public ShieldController shieldController;\r\n\r\n        /// <summary>\r\n        /// This method is invoked whenever the kernel is loading\r\n        /// Since the kernel lives throughout the entire lifecycle  of the game, this will only be invoked once.\r\n        /// </summary>\r\n        public override void Setup()\r\n        {\r\n            base.Setup();\r\n            // Use the line below to subscribe to events\r\n            // this.OnEvent<MyEvent>().Subscribe(myEventInstance => { TODO });\r\n        }\r\n\r\n        #region Event Handler\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new PanelLoadedEvent())\r\n        /// </sumarry>\r\n        public override void PanelLoadedEventHandler(PanelLoadedEvent data)\r\n        {\r\n            base.PanelLoadedEventHandler(data);\r\n\r\n            if (!MenuRoot.m_OnLoaded.ContainsKey(data.panelName)) return;\r\n\r\n            data.panelViewModel.panelName = data.panelName;\r\n            MenuRoot.m_OnLoaded[data.panelName](data.panelViewModel);\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new PanelUnloadEvent())\r\n        /// </sumarry>\r\n        public override void PanelUnloadEventHandler(PanelUnloadEvent data)\r\n        {\r\n            base.PanelUnloadEventHandler(data);\r\n\r\n            if (MenuRoot.m_OnLoaded.ContainsKey(data.panelName))\r\n            {\r\n                MenuRoot.m_OnLoaded.Remove(data.panelName);\r\n            }\r\n        }\r\n        #endregion\r\n\r\n        #region Command Handler\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new CreateLoadingCommand())\r\n        /// </sumarry>\r\n        public override void CreateLoadingCommandHandler(CreateLoadingCommand data)\r\n        {\r\n            base.CreateLoadingCommandHandler(data);\r\n\r\n            if (string.IsNullOrEmpty(MenuRoot.m_LoadingPanelName))\r\n            {\r\n                LoadFirstScreen();\r\n                return;\r\n            }\r\n\r\n            if (MenuRoot.loadingTop == null)\r\n            {\r\n                PanelViewModel loadingPanel = panelController.CreatePanel();\r\n                loadingPanel.posIndex = MenuConst.SHIELD_TOP_INDEX;\r\n                loadingPanel.depthIndex = MenuConst.SHIELD_TOP_INDEX;\r\n                MenuRoot.loadingTop = loadingPanel;\r\n                LoadFirstScreen();\r\n            }\r\n        }\r\n\r\n        private void LoadFirstScreen()\r\n        {\r\n            if (!string.IsNullOrEmpty(MenuRoot.m_FirstScreenName))\r\n            {\r\n                StartCoroutine(IEScreen(MenuRoot.m_FirstScreenName));\r\n            }\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new OpenScreenCommand())\r\n        /// </sumarry>\r\n        public override void OpenScreenCommandHandler(OpenScreenCommand cmd)\r\n        {\r\n            base.OpenScreenCommandHandler(cmd);\r\n            StartCoroutine(IEScreen(cmd.panelName, cmd.data, cmd.onActive, cmd.onDeactive));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new OpenSubScreenCommand())\r\n        /// </sumarry>\r\n        public override void OpenSubScreenCommandHandler(OpenSubScreenCommand cmd)\r\n        {\r\n            base.OpenSubScreenCommandHandler(cmd);\r\n            StartCoroutine(IESubScreen(cmd.panelName, cmd.data, cmd.onActive, cmd.onDeactive));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new OpenPopupCommand())\r\n        /// </sumarry>\r\n        public override void OpenPopupCommandHandler(OpenPopupCommand cmd)\r\n        {\r\n            base.OpenPopupCommandHandler(cmd);\r\n            StartCoroutine(IEPopUp(cmd.panelName, cmd.data, cmd.onActive, cmd.onDeactive));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new OpenMainMenuCommand())\r\n        /// </sumarry>\r\n        public override void OpenMainMenuCommandHandler(OpenMainMenuCommand cmd)\r\n        {\r\n            base.OpenMainMenuCommandHandler(cmd);\r\n            StartCoroutine(IEMainMenu(cmd.panelName, cmd.data, cmd.onActive, cmd.onDeactive));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new ClosePanelCommand())\r\n        /// </sumarry>\r\n        public override void ClosePanelCommandHandler(ClosePanelCommand cmd)\r\n        {\r\n            base.ClosePanelCommandHandler(cmd);\r\n            StartCoroutine(IEClose(cmd.immediate, cmd.callback));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new ResetPanelCommand())\r\n        /// </sumarry>\r\n        public override void ResetPanelCommandHandler(ResetPanelCommand cmd)\r\n        {\r\n            base.ResetPanelCommandHandler(cmd);\r\n            string menuName = DestroyCurrentStack();\r\n            StartCoroutine(IEScreen(menuName, cmd.data, cmd.onActive, cmd.onDeactive));\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new ShowMainMenuCommand())\r\n        /// </sumarry>\r\n        public override void ShowMainMenuCommandHandler(ShowMainMenuCommand data)\r\n        {\r\n            base.ShowMainMenuCommandHandler(data);\r\n            if (MenuRoot.mainMenu != null)\r\n            {\r\n                MenuRoot.mainMenu.isActive = true;\r\n            }\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new HideMainMenuCommand())\r\n        /// </sumarry>\r\n        public override void HideMainMenuCommandHandler(HideMainMenuCommand data)\r\n        {\r\n            base.HideMainMenuCommandHandler(data);\r\n            if (MenuRoot.mainMenu != null)\r\n            {\r\n                MenuRoot.mainMenu.isActive = false;\r\n            }\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new GoHomeScreenCommand())\r\n        /// </sumarry>\r\n        public override void GoHomeScreenCommandHandler(GoHomeScreenCommand data)\r\n        {\r\n            base.GoHomeScreenCommandHandler(data);\r\n            if (!string.IsNullOrEmpty(MenuRoot.m_HomeScreenName))\r\n            {\r\n                if (MenuRoot.m_CurrentStackScreen.Peek() == MenuRoot.m_HomeScreenName)\r\n                {\r\n                    Quit();\r\n                }\r\n                else\r\n                {\r\n                    OpenScreen(MenuRoot.m_HomeScreenName);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Quit();\r\n            }\r\n        }\r\n\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new DestoryInactivePanelsCommand())\r\n        /// </sumarry>\r\n        public override void DestoryInactivePanelsCommandHandler(DestoryInactivePanelsCommand cmd)\r\n        {\r\n            base.DestoryInactivePanelsCommandHandler(cmd);\r\n            // Screen stacks\r\n            foreach (var screens in MenuRoot.m_DictScreen)\r\n            {\r\n                string sn = screens.Key;\r\n                if (IsNotInExcept(sn, cmd.exceptList) && (screens.Value != null && screens.Value.Count != 0))\r\n                {\r\n                    DestroyPanelsFrom(sn);\r\n                }\r\n            }\r\n\r\n            // Rest panels\r\n            string[] restList = new string[MenuRoot.m_DictAllPanel.Keys.Count];\r\n            MenuRoot.m_DictAllPanel.Keys.CopyTo(restList, 0);\r\n\r\n            foreach (var sn in restList)\r\n            {\r\n                if (IsNotInExcept(sn, cmd.exceptList))\r\n                {\r\n                    DestroyPanelsFrom(sn);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new PreLoadPanelCommand())\r\n        /// </sumarry>\r\n        public override void PreLoadPanelCommandHandler(PreLoadPanelCommand cmd)\r\n        {\r\n            base.PreLoadPanelCommandHandler(cmd);\r\n\r\n            string pName = cmd.panelName;\r\n\r\n            MenuRoot.LoadPanel.OnNext(new LoadPanelCommand()\r\n            {\r\n                panelName = pName,\r\n            });\r\n\r\n            MenuRoot.m_OnLoaded.Add(pName, (PanelViewModel pViewModel) =>\r\n            {\r\n                // Add to Menus\r\n                MenuRoot.Panels.Add(pViewModel);\r\n\r\n                // Add to dictionary\r\n                MenuRoot.m_DictAllPanel.Add(pName, pViewModel);\r\n\r\n                // DeActive\r\n                pViewModel.isActive = false;\r\n\r\n                // Event\r\n                OnPanelLoad(pViewModel);\r\n            });\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new ShowLoadingCommand())\r\n        /// </sumarry>\r\n        public override void ShowLoadingCommandHandler(ShowLoadingCommand data)\r\n        {\r\n            base.ShowLoadingCommandHandler(data);\r\n            if (MenuRoot.loadingTop == null) return;\r\n\r\n            ShieldTopOn(data.alpha);\r\n            MenuRoot.loadingTop.isActive = true;\r\n\r\n            MenuRoot.m_LoadingCount++;\r\n\r\n            if (data.timeOut > 0)\r\n            {\r\n                StartCoroutine(\"IEHideLoading\", new CallbackData(data.timeOut, data.callBack));\r\n            }\r\n        }\r\n\r\n        /// <sumarry>\r\n        // This method is executed when using this.Publish(new HideLoadingCommand())\r\n        /// </sumarry>\r\n        public override void HideLoadingCommandHandler(HideLoadingCommand cmd)\r\n        {\r\n            base.HideLoadingCommandHandler(cmd);\r\n\r\n            HideLoading(cmd.isForceHide);\r\n        }\r\n\r\n        #endregion\r\n\r\n        #region Private Method\r\n        /// <summary>\r\n        /// Hides the loading indicator. If you called n-times ShowLoading, you must to call n-times HideLoading to hide.\r\n        /// </summary>\r\n        /// <param name=\"isForceHide\">If set to <c>true</c> is force hide without counting.</param>\r\n        public void HideLoading(bool isForceHide = false)\r\n        {\r\n            if (MenuRoot.loadingTop == null || !MenuRoot.loadingTop.isActive) return;\r\n\r\n            MenuRoot.m_LoadingCount--;\r\n\r\n            if (MenuRoot.m_LoadingCount == 0 || isForceHide)\r\n            {\r\n                MenuRoot.m_LoadingCount = 0;\r\n                ShieldTopOff();\r\n                MenuRoot.loadingTop.isActive = false;\r\n            }\r\n\r\n            StopCoroutine(\"IEHideLoading\");\r\n        }\r\n\r\n        private void BackToScreen()\r\n        {\r\n            StartCoroutine(IEBackScreen());\r\n        }\r\n\r\n        private IEnumerator IEScreen(string panelName, object data = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            yield return StartCoroutine(IEWaitForNotBusy());\r\n            OpenScreen(panelName, data, onActive, onDeactive);\r\n        }\r\n\r\n        private IEnumerator IESubScreen(string panelName, object data = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            yield return StartCoroutine(IEWaitForNotBusy());\r\n            OpenScreenAdd(panelName, data, false, onActive, onDeactive);\r\n        }\r\n\r\n        private IEnumerator IEPopUp(string panelName, object data = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            yield return StartCoroutine(IEWaitForNotBusy());\r\n\r\n            if (IsPanelActive(panelName))\r\n            {\r\n                MenuRoot.m_CanClose = true;\r\n            }\r\n\r\n            while (IsPanelActive(panelName))\r\n            {\r\n                yield return new WaitForEndOfFrame();\r\n            }\r\n            MenuRoot.m_IsBusy = true;\r\n\r\n            OpenPopUp(panelName, data, false, onActive, onDeactive);\r\n        }\r\n\r\n        private IEnumerator IEMainMenu(string panelName, object data = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            yield return new WaitForEndOfFrame();\r\n            OpenMainMenu(panelName, onActive, onDeactive);\r\n        }\r\n\r\n        private IEnumerator IEClose(bool immediate = false, NoParamCallback callback = null)\r\n        {\r\n            if (MenuRoot.m_CanClose)\r\n            {\r\n                MenuRoot.m_CanClose = false;\r\n                CloseAny(immediate, callback);\r\n            }\r\n            else\r\n            {\r\n                yield return StartCoroutine(IEWaitForNotBusy());\r\n                CloseAny(immediate, callback);\r\n            }\r\n        }\r\n\r\n        private bool IsPanelActive(string panelName)\r\n        {\r\n            string pName = panelName;\r\n\r\n            if (MenuRoot.m_DictAllPanel.ContainsKey(pName))\r\n            {\r\n                return MenuRoot.m_DictAllPanel[pName].isActive;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        private IEnumerator IEBackScreen()\r\n        {\r\n            yield return StartCoroutine(IEWaitForNotBusy());\r\n\r\n            // Close all pop up\r\n            CloseAllPopUp();\r\n\r\n            // Close screens\r\n            int n = MenuRoot.m_CurrentStackScreen.Count;\r\n            if (n == 2)\r\n            {\r\n                CloseAny();\r\n            }\r\n            else\r\n            {\r\n                while (MenuRoot.m_CurrentStackScreen.Count > 1)\r\n                {\r\n                    CloseAny(true);\r\n                }\r\n            }\r\n        }\r\n\r\n        private IEnumerator IEWaitForNotBusy()\r\n        {\r\n            while (MenuRoot.m_IsBusy)\r\n            {\r\n                yield return new WaitForEndOfFrame();\r\n            }\r\n\r\n            MenuRoot.m_IsBusy = true;\r\n        }\r\n\r\n        private IEnumerator IEHideLoading(CallbackData callbackData)\r\n        {\r\n            yield return new WaitForSeconds(callbackData.TimeOut);\r\n\r\n            HideLoading();\r\n\r\n            if (callbackData.Callback != null)\r\n            {\r\n                callbackData.Callback();\r\n            }\r\n        }\r\n\r\n        private void OpenScreen(string panelName, object data = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string pName = panelName;\r\n\r\n            // Check valid\r\n            if (!CanOpenScreen(pName))\r\n            {\r\n                MenuRoot.m_IsBusy = false;\r\n                return;\r\n            }\r\n\r\n            // Prev Stack screen\r\n            Stack<string> prevStack = MenuRoot.m_CurrentStackScreen;\r\n\r\n            // Set screen stack to current\r\n            string top = StackScreen(pName);\r\n\r\n            // onScreenStartChange\r\n            if (MenuRoot.onScreenStartChange != null)\r\n            {\r\n                MenuRoot.onScreenStartChange(panelName);\r\n            }\r\n\r\n            // Hide All\r\n            if (MenuRoot.m_ClearOnLoad)\r\n            {\r\n                HideAll(prevStack);\r\n            }\r\n\r\n            if (pName == top)// First time load\r\n            {\r\n                OpenPanel(pName, 0, 0, data, true, string.Empty,\r\n                    //Animation End Call\r\n                    () =>\r\n                    {\r\n                        if (!MenuRoot.m_ClearOnLoad)\r\n                        {\r\n                            HideAll(prevStack);\r\n                        }\r\n                    },\r\n                    //Loaded Call\r\n                    null,\r\n                    onActive, onDeactive);\r\n            }\r\n            else // Not first time\r\n            {\r\n                if (!MenuRoot.m_ClearOnLoad)\r\n                {\r\n                    HideAll(prevStack);\r\n                }\r\n\r\n                // Just active screen\r\n                ActiveAPanel(top);\r\n\r\n                // Show and BGM\r\n                PanelViewModel panel = GetPanel(top);\r\n                if (panel != null)\r\n                {\r\n                    ShowAndBGMChangeOpen(top, panel.CurrentBGM);\r\n                }\r\n\r\n                MenuRoot.m_IsBusy = false;\r\n            }\r\n        }\r\n\r\n        private void OpenScreenAdd(string panelName, object data = null, bool imme = false, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string pName = panelName;\r\n\r\n            // Check valid\r\n            if (!CanOpenSubScreen(pName))\r\n            {\r\n                MenuRoot.m_IsBusy = false;\r\n                return;\r\n            }\r\n\r\n            // Bot Scene\r\n            string bot = StackScreenBottom(MenuRoot.m_CurrentStackScreen);\r\n            if (string.IsNullOrEmpty(bot))\r\n            {\r\n                Debug.LogWarning(\"Main screen is not exist, can't add this screen above!\");\r\n                return;\r\n            }\r\n\r\n            // Next index\r\n            int ip = -2 - MenuRoot.m_CurrentStackScreen.Count;\r\n            float ic = 0.3f + (float)MenuRoot.m_CurrentStackScreen.Count / MenuConst.DEPTH_DISTANCE;\r\n\r\n            // Prev Scene\r\n            string preSn = MenuRoot.m_CurrentStackScreen.Peek();\r\n            PanelViewModel panel = GetPanel(preSn);\r\n\r\n            // Cur BGM\r\n            string curBGM = panel.CurrentBGM;\r\n\r\n            // Thread 1\r\n            OpenPanel(pName, ip, ic, data, imme, curBGM,\r\n                () =>\r\n                {\r\n                    // Set isCache of this scene same the isCache of bottom scene of stack screen\r\n                    PanelViewModel newPanel = GetPanel(pName);\r\n                    newPanel.isCache = true;\r\n\r\n                    // Push stack\r\n                    MenuRoot.m_CurrentStackScreen.Push(pName);\r\n                },\r\n                () =>\r\n                {\r\n                    // Thread 2\r\n                    if (panel != null)\r\n                    {\r\n                        panel.FocusPanel.OnNext(new FocusPanelCommand() { isFocus = false });\r\n                    }\r\n                    // Animation\r\n                    AnimType animType = (imme) ? AnimType.NO_ANIM : AnimType.HIDE_BACK;\r\n\r\n                    panel.PlayPanelAnimation.OnNext(new PlayPanelAnimationCommand()\r\n                    {\r\n                        panelAnimType = animType,\r\n                        onAniFinish = () =>\r\n                        {\r\n                            DeactiveAPanel(preSn);\r\n                        }\r\n                    });\r\n                }, onActive, onDeactive);\r\n        }\r\n\r\n        private void OpenPopUp(string menuName, object data = null, bool imme = false, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string mn = menuName;\r\n\r\n            // Check valid\r\n            if (!CanOpenPopUp(mn))\r\n            {\r\n                MenuRoot.m_IsBusy = false;\r\n                return;\r\n            }\r\n\r\n            // Count\r\n            int c = MenuRoot.m_StackPopUp.Count + 1;\r\n\r\n            // Next index\r\n            int ip = c;\r\n            float ic = c;\r\n\r\n            // Prev Scene\r\n            PanelViewModel menu = null;\r\n            string curBGM = null;\r\n\r\n            // Highest popup\r\n            if (MenuRoot.m_StackPopUp.Count >= 1)\r\n            {\r\n                string preSn = MenuRoot.m_StackPopUp.Peek();\r\n\r\n                menu = GetPanel(preSn);\r\n            }\r\n            // Or highest screen\r\n            else if (MenuRoot.m_CurrentStackScreen != null && MenuRoot.m_CurrentStackScreen.Count >= 1)\r\n            {\r\n                string preSn = MenuRoot.m_CurrentStackScreen.Peek();\r\n\r\n                menu = GetPanel(preSn);\r\n\r\n            }\r\n\r\n            if (menu != null)\r\n            {\r\n                // Cur BGM\r\n                curBGM = menu.CurrentBGM;\r\n\r\n                // Shield\r\n                ShieldOn(MenuRoot.m_StackPopUp.Count, MenuRoot.m_DefaultShieldColor);\r\n            }\r\n            else\r\n            {\r\n                ShieldOn(0, MenuRoot.m_DefaultShieldColor);\r\n            }\r\n\r\n            // Push stack\r\n            MenuRoot.m_StackPopUp.Push(mn);\r\n\r\n            OpenPanel(mn, ip, ic, data, imme, curBGM, () =>\r\n            {\r\n                if (menu != null)\r\n                {\r\n                    menu.FocusPanel.OnNext(new FocusPanelCommand());\r\n                }\r\n            }, null, onActive, onDeactive);\r\n        }\r\n\r\n        private void OpenMainMenu(string menuName, PanelCallBackDelegate onAcitive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string mn = menuName;\r\n\r\n            // Next index\r\n            int posIndex = -1;\r\n            float canvasIndex = 0.8f;\r\n\r\n            OpenPanel(mn, posIndex, canvasIndex, null, true, string.Empty, null, () => { MenuRoot.mainMenu = (MainMenuViewModel)MenuRoot.m_DictAllPanel[menuName]; }, onAcitive, onDeactive);\r\n        }\r\n\r\n        private bool CanOpenPopUp(string menuName)\r\n        {\r\n            if (MenuRoot.m_StackPopUp.Contains(menuName))\r\n            {\r\n                Debug.LogWarning(\"This popup was added to stack!\");\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        private bool CanOpenScreen(string menuName)\r\n        {\r\n            foreach (var pair in MenuRoot.m_DictScreen)\r\n            {\r\n                string bot = StackScreenBottom(pair.Value);\r\n\r\n                bool isCurStack = (MenuRoot.m_CurrentStackScreen == pair.Value);\r\n                bool isInStack = pair.Value.Contains(menuName);\r\n\r\n                if (menuName == bot && isCurStack)\r\n                {\r\n                    if (MenuRoot.m_CurrentStackScreen.Count > 1)\r\n                    {\r\n                        BackToScreen();\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (menuName != bot && isInStack)\r\n                {\r\n                    Debug.LogWarning(\"This screen was added to stack!\");\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        private bool CanOpenSubScreen(string menuName)\r\n        {\r\n            foreach (var pair in MenuRoot.m_DictScreen)\r\n            {\r\n                bool isInStack = pair.Value.Contains(menuName);\r\n\r\n                if (isInStack)\r\n                {\r\n                    Debug.LogWarning(\"This screen was added to stack!\");\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        private void HideAll(Stack<string> stackScreen)\r\n        {\r\n            // Close all pop up\r\n            CloseAllPopUp();\r\n\r\n            // Get is cache\r\n            bool isClearStackScreen = false;\r\n            string bot = StackScreenBottom(stackScreen);\r\n            if (!string.IsNullOrEmpty(bot))\r\n            {\r\n                PanelViewModel menu = GetPanel(bot);\r\n\r\n                bool isAdditive = (MenuRoot.m_IsAllAdditive || !MenuRoot.m_NotAdditivePanelList.Contains(bot));\r\n                bool isNoCache = (menu != null && !menu.isCache);\r\n\r\n                if (!isAdditive || isNoCache)\r\n                {\r\n                    isClearStackScreen = true;\r\n                }\r\n            }\r\n\r\n            // Close top screen of this stack\r\n            if (stackScreen.Count >= 1)\r\n            {\r\n                string top = stackScreen.Peek();\r\n                ClosePanel(top, true, null, true);\r\n            }\r\n\r\n            // Clear if not cache\r\n            if (isClearStackScreen)\r\n            {\r\n                if (!string.IsNullOrEmpty(bot))\r\n                {\r\n                    DestroyPanelsFrom(bot);\r\n                }\r\n                stackScreen.Clear();\r\n            }\r\n        }\r\n\r\n        private void CloseAllPopUp()\r\n        {\r\n            while (MenuRoot.m_StackPopUp.Count >= 1)\r\n            {\r\n                ClosePopUp(true);\r\n            }\r\n        }\r\n\r\n        private void ClosePopUp(bool imme, NoParamCallback callback = null)\r\n        {\r\n            string curPanel = MenuRoot.m_StackPopUp.Pop();\r\n            string prePanel = string.Empty;\r\n\r\n            if (MenuRoot.m_StackPopUp.Count >= 1)\r\n            {\r\n                prePanel = MenuRoot.m_StackPopUp.Peek();\r\n            }\r\n            else\r\n            {\r\n                if (MenuRoot.m_CurrentStackScreen != null && MenuRoot.m_CurrentStackScreen.Count >= 1)\r\n                {\r\n                    prePanel = MenuRoot.m_CurrentStackScreen.Peek();\r\n                }\r\n            }\r\n\r\n            ClosePanel(curPanel, imme, () =>\r\n            {\r\n                // Shield Off\r\n                ShieldOff();\r\n\r\n                // Show & BGM change\r\n                ShowAndBGMChangeClose(prePanel);\r\n\r\n                // Callback\r\n                if (callback != null)\r\n                {\r\n                    callback();\r\n                }\r\n            });\r\n        }\r\n\r\n        private void CloseScreen(bool imme, NoParamCallback callback = null)\r\n        {\r\n            string curPanel = MenuRoot.m_CurrentStackScreen.Pop();\r\n            string prePanel = string.Empty;\r\n\r\n            // Check if has prev scene\r\n            if (MenuRoot.m_CurrentStackScreen.Count > 0)\r\n            {\r\n                prePanel = MenuRoot.m_CurrentStackScreen.Peek();\r\n            }\r\n\r\n            // Thread 1 (current scene animation)\r\n            ClosePanel(curPanel, imme, () =>\r\n            {\r\n                if (callback != null)\r\n                {\r\n                    callback();\r\n                }\r\n            });\r\n\r\n            // Thread 2 (previous scene animation)\r\n            if (!string.IsNullOrEmpty(prePanel))\r\n            {\r\n                // Active\r\n                ActiveAPanel(prePanel);\r\n\r\n                // Animation\r\n                AnimType animType = (imme) ? AnimType.NO_ANIM : AnimType.SHOW_BACK;\r\n\r\n                PanelViewModel panel = GetPanel(prePanel);\r\n                panel.PlayPanelAnimation.OnNext(new PlayPanelAnimationCommand()\r\n                {\r\n                    panelAnimType = animType,\r\n                    onAniFinish = () =>\r\n                    {\r\n                        ShowAndBGMChangeClose(prePanel);\r\n                    }\r\n                });\r\n            }\r\n            else\r\n            {\r\n                // Do nothing or application quit\r\n            }\r\n        }\r\n\r\n        private string StackScreen(string panelName)\r\n        {\r\n            // Check Exist\r\n            if (!MenuRoot.m_DictScreen.ContainsKey(panelName))\r\n            {\r\n                MenuRoot.m_DictScreen.Add(panelName, new Stack<string>());\r\n            }\r\n            MenuRoot.m_CurrentStackScreen = MenuRoot.m_DictScreen[panelName];\r\n\r\n            // If empty, push then return panelName\r\n            if (MenuRoot.m_CurrentStackScreen.Count == 0)\r\n            {\r\n                MenuRoot.m_CurrentStackScreen.Push(panelName);\r\n                return panelName;\r\n            }\r\n\r\n            // If not empty, return top of stack\r\n            return MenuRoot.m_CurrentStackScreen.Peek();\r\n        }\r\n\r\n        private string StackScreenBottom(Stack<string> stack)\r\n        {\r\n            if (stack == null)\r\n                return null;\r\n\r\n            string r = null;\r\n            foreach (string s in stack)\r\n            {\r\n                r = s;\r\n            }\r\n            return r;\r\n        }\r\n\r\n        private ShieldViewModel CreateShield(int i)\r\n        {\r\n            ShieldViewModel shield = shieldController.CreateShield();\r\n            shield.isActive = true;\r\n            shield.posIndex = i;\r\n            shield.depthIndex = i;\r\n            return shield;\r\n        }\r\n\r\n        private void ShowEmptyShield()\r\n        {\r\n            if (MenuRoot.shieldEmpty == null)\r\n            {\r\n                MenuRoot.shieldEmpty = CreateShield(MenuConst.SHIELD_TOP_INDEX - 2);\r\n            }\r\n            else\r\n            {\r\n                MenuRoot.shieldEmpty.isActive = true;\r\n            }\r\n\r\n            MenuRoot.shieldEmpty.color = new Color(0, 0, 0, 0);\r\n            MenuRoot.m_ShieldEmptyCount++;\r\n\r\n            // Lock\r\n            LockTopScene();\r\n        }\r\n\r\n        private void HideEmptyShield()\r\n        {\r\n            if (MenuRoot.shieldEmpty != null)\r\n            {\r\n                MenuRoot.m_ShieldEmptyCount--;\r\n                if (MenuRoot.m_ShieldEmptyCount == 0)\r\n                {\r\n                    MenuRoot.shieldEmpty.isActive = false;\r\n\r\n                    // Unlock\r\n                    UnlockTopScene();\r\n                }\r\n            }\r\n        }\r\n\r\n        protected void ShieldTopOn(float alpha)\r\n        {\r\n            if (MenuRoot.shieldTop == null)\r\n            {\r\n                MenuRoot.shieldTop = CreateShield(MenuConst.SHIELD_TOP_INDEX - 1);\r\n            }\r\n            else\r\n            {\r\n                MenuRoot.shieldTop.isActive = true;\r\n            }\r\n\r\n            Color color = MenuRoot.m_DefaultShieldColor;\r\n            color.a = alpha;\r\n            MenuRoot.shieldTop.color = color;\r\n\r\n            // Lock\r\n            LockTopScene();\r\n        }\r\n\r\n        protected void ShieldTopOff()\r\n        {\r\n            if (MenuRoot.shieldTop != null)\r\n            {\r\n                MenuRoot.shieldTop.isActive = false;\r\n                UnlockTopScene();\r\n            }\r\n        }\r\n\r\n        protected void ShieldOn(int i, Color color)\r\n        {\r\n            if (i < 0) return;\r\n\r\n            if (MenuRoot.Shields.Count <= i)\r\n            {\r\n                // Create shield\r\n                ShieldViewModel sh = CreateShield(i);\r\n                sh.isActive = true;\r\n\r\n                // Add to List\r\n                MenuRoot.Shields.Add(sh);\r\n            }\r\n            else\r\n            {\r\n                MenuRoot.Shields[i].isActive = true;\r\n            }\r\n\r\n            MenuRoot.Shields[i].color = color;\r\n\r\n            // Lock\r\n            LockTopScene();\r\n        }\r\n\r\n        protected void ShieldOff()\r\n        {\r\n            int i = MenuRoot.m_StackPopUp.Count;\r\n\r\n            if (i < 0) return;\r\n\r\n            if (MenuRoot.Shields.Count >= i)\r\n                MenuRoot.Shields[i].isActive = false;\r\n\r\n            // Unlock\r\n            UnlockTopScene();\r\n        }\r\n\r\n        protected void LockTopScene()\r\n        {\r\n            this.Publish(new LockScreenEvent());\r\n        }\r\n\r\n        protected void UnlockTopScene()\r\n        {\r\n            if (IsShieldOn()) return;\r\n            this.Publish(new UnLockScreenEvent());\r\n        }\r\n\r\n        private bool IsShieldOn()\r\n        {\r\n            for (int i = 0; i < MenuRoot.Shields.Count; i++)\r\n            {\r\n                if (MenuRoot.Shields[i].isActive) return true;\r\n            }\r\n\r\n            if (MenuRoot.m_ShieldEmptyCount > 0) return true;\r\n\r\n            if (MenuRoot.shieldTop != null && MenuRoot.shieldTop.isActive) return true;\r\n\r\n            return false;\r\n        }\r\n\r\n        private void SetPosition(string panelName, int posIndex)\r\n        {\r\n            PanelViewModel panel = GetPanel(panelName);\r\n            panel.posIndex = posIndex;\r\n        }\r\n\r\n        private void SetCanvases(string panelName, float canvasIndex)\r\n        {\r\n            PanelViewModel panel = GetPanel(panelName);\r\n            panel.depthIndex = canvasIndex;\r\n        }\r\n\r\n        private void OpenPanel(string panelName, int posIndex, float canvasIndex, object data, bool imme, string curBGM,\r\n            NoParamCallback onAnimEnded = null, NoParamCallback onLoaded = null, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string pName = panelName;\r\n\r\n            // Show Empty shield\r\n            ShowEmptyShield();\r\n\r\n            LoadOrActive(pName, () =>\r\n            {\r\n                if (onLoaded != null)\r\n                {\r\n                    onLoaded();\r\n                }\r\n\r\n                // Set canvas and position\r\n                SetCanvases(pName, canvasIndex);\r\n                SetPosition(pName, posIndex);\r\n\r\n                // On Set\r\n                PanelViewModel panel = GetPanel(pName);\r\n                if (panel != null)\r\n                {\r\n                    panel.SetPanelData.OnNext(new SetPanelDataCommand()\r\n                    {\r\n                        panelData = data\r\n                    });\r\n                }\r\n\r\n                // Animation\r\n                AnimType animType = (imme) ? AnimType.NO_ANIM : AnimType.SHOW;\r\n                panel.PlayPanelAnimation.OnNext(new PlayPanelAnimationCommand()\r\n                {\r\n                    panelAnimType = animType,\r\n                    onAniFinish = () =>\r\n                    {\r\n                        // Show & BGM change\r\n                        ShowAndBGMChangeOpen(pName, curBGM);\r\n\r\n                        // Hide empty shield\r\n                        HideEmptyShield();\r\n\r\n                        // Call back\r\n                        if (onAnimEnded != null) onAnimEnded();\r\n\r\n                        // No busy\r\n                        MenuRoot.m_IsBusy = false;\r\n                    }\r\n                });\r\n            }, onActive, onDeactive);\r\n        }\r\n\r\n        private void ClosePanel(string panelName, bool imme, NoParamCallback onAnimEnded = null, bool forceDontDestroy = false)\r\n        {\r\n            string pName = panelName;\r\n            AnimType animType = (imme) ? AnimType.NO_ANIM : AnimType.HIDE;\r\n\r\n            PanelViewModel panel = GetPanel(pName);\r\n\r\n            if (panel != null)\r\n            {\r\n                // Show Empty shield\r\n                ShowEmptyShield();\r\n\r\n                // Hide\r\n                panel.FocusPanel.OnNext(new FocusPanelCommand() { isFocus = false });\r\n                panel.HidePanel.OnNext(new HidePanelCommand());\r\n\r\n                panel.PlayPanelAnimation.OnNext(new PlayPanelAnimationCommand()\r\n                {\r\n                    panelAnimType = animType,\r\n                    onAniFinish = () =>\r\n                    {\r\n                        // Deactive\r\n                        DeactiveAPanel(pName);\r\n\r\n                        // Destroy or Cache\r\n                        if (!forceDontDestroy)\r\n                        {\r\n                            DestroyOrCache(panel);\r\n                        }\r\n\r\n                        // Hide empty shield\r\n                        HideEmptyShield();\r\n\r\n                        // Next Step\r\n                        if (onAnimEnded != null) onAnimEnded();\r\n\r\n                        // No Busy\r\n                        MenuRoot.m_IsBusy = false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        private void CloseAny(bool imme = false, NoParamCallback callback = null)\r\n        {\r\n            if (MenuRoot.m_StackPopUp.Count >= 1)\r\n            {\r\n                ClosePopUp(imme, callback);\r\n            }\r\n            else\r\n            {\r\n                if (MenuRoot.m_CurrentStackScreen.Count > 1)\r\n                {\r\n                    CloseScreen(imme, callback);\r\n                }\r\n                else\r\n                {\r\n                    if (MenuRoot.m_CurrentStackScreen.Count == 1)\r\n                    {\r\n                        // Do Nothing\r\n                    }\r\n                    MenuRoot.m_IsBusy = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        private void LoadOrActive(string panelName, NoParamCallback onLoaded, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            string pName = panelName;\r\n\r\n            if (MenuRoot.m_DictAllPanel.ContainsKey(pName))\r\n            {\r\n                // Callback\r\n                SetActiveDeactiveCallback(pName, onActive, onDeactive);\r\n\r\n                // Active\r\n                ActiveAPanel(pName);\r\n\r\n                // Event\r\n                onLoaded();\r\n            }\r\n            else\r\n            {\r\n                MenuRoot.LoadPanel.OnNext(new LoadPanelCommand()\r\n                {\r\n                    panelName = pName,\r\n                });\r\n\r\n                MenuRoot.m_OnLoaded.Add(panelName, (PanelViewModel pViewModel) =>\r\n                {\r\n                    // Add to Menus\r\n                    MenuRoot.Panels.Add(pViewModel);\r\n\r\n                    // Add to dictionary\r\n                    MenuRoot.m_DictAllPanel.Add(pName, pViewModel);\r\n\r\n                    // Callback\r\n                    SetActiveDeactiveCallback(pName, onActive, onDeactive);\r\n\r\n                    // Active\r\n                    ActiveAPanel(pName);\r\n\r\n                    // Event\r\n                    OnPanelLoad(pViewModel);\r\n                    onLoaded();\r\n                });\r\n            }\r\n        }\r\n\r\n        private void SetActiveDeactiveCallback(string panelName, PanelCallBackDelegate onActive = null, PanelCallBackDelegate onDeactive = null)\r\n        {\r\n            PanelViewModel panel = GetPanel(panelName);\r\n            if (panel != null)\r\n            {\r\n                panel.onActive = onActive;\r\n                panel.onDeactive = onDeactive;\r\n            }\r\n        }\r\n\r\n        private void DestroyOrCache(PanelViewModel panel)\r\n        {\r\n            bool isAdditive = (MenuRoot.m_IsAllAdditive || !MenuRoot.m_NotAdditivePanelList.Contains(panel.panelName));\r\n            bool isNoCache = (panel != null && !panel.isCache);\r\n\r\n            if (!isAdditive || isNoCache)\r\n            {\r\n                OnPanelUnLoad(panel);\r\n                MenuRoot.m_DictAllPanel.Remove(panel.panelName);\r\n                this.Publish(new PanelUnloadEvent() { panelName = panel.panelName });\r\n                panel.ExecuteDestroyPanel();\r\n            }\r\n        }\r\n\r\n        private void DestoryPanel(string panelName)\r\n        {\r\n            PanelViewModel panel = GetPanel(panelName);\r\n            if (panel != null)\r\n            {\r\n                // Unload\r\n                OnPanelUnLoad(panel);\r\n\r\n                MenuRoot.m_DictAllPanel.Remove(panel.panelName);\r\n                this.Publish(new PanelUnloadEvent() { panelName = panel.panelName });\r\n\r\n                // Destory\r\n                panel.ExecuteDestroyPanel();\r\n            }\r\n        }\r\n\r\n        public string DestroyCurrentStack()\r\n        {\r\n            Stack<string> stack = MenuRoot.m_CurrentStackScreen;\r\n            string s = null;\r\n\r\n            while (stack != null && stack.Count >= 1)\r\n            {\r\n                s = stack.Pop();\r\n                DestoryPanel(s);\r\n            }\r\n\r\n            MenuRoot.m_CurrentStackScreen = new Stack<string>();\r\n\r\n            return s;\r\n        }\r\n\r\n        public void DestroyPanelsFrom(string panelName)\r\n        {\r\n            string pName = panelName;\r\n\r\n            // Check if in the dict\r\n            if (!MenuRoot.m_DictAllPanel.ContainsKey(pName))\r\n            {\r\n                Debug.LogWarning(\"No exist scene to destroy: \" + pName);\r\n                return;\r\n            }\r\n\r\n            // Check in pop up stack\r\n            if (MenuRoot.m_StackPopUp.Contains(pName))\r\n            {\r\n                Debug.LogWarning(\"This pop up is active now: \" + pName);\r\n                return;\r\n            }\r\n\r\n            // Check in screen screen stacks\r\n            foreach (var screens in MenuRoot.m_DictScreen)\r\n            {\r\n                Stack<string> stack = screens.Value;\r\n\r\n                if (stack.Contains(pName))\r\n                {\r\n                    // Not in current stack\r\n                    if (stack != MenuRoot.m_CurrentStackScreen)\r\n                    {\r\n                        if (stack.Count >= 1)\r\n                        {\r\n                            string s = stack.Pop();\r\n\r\n                            while (string.Compare(s, pName) != 0)\r\n                            {\r\n                                DestoryPanel(s);\r\n                                s = stack.Pop();\r\n                            }\r\n                            DestoryPanel(pName);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        Debug.LogWarning(\"Can't destroy this scene. It's in an active stack: \" + pName);\r\n                        return;\r\n                    }\r\n\r\n                    // Break because found the stack contain scene.\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If not in any stack, just destroy\r\n            if (MenuRoot.m_DictAllPanel.ContainsKey(pName))\r\n            {\r\n                DestoryPanel(pName);\r\n                return;\r\n            }\r\n        }\r\n\r\n        private void ActiveAPanel(string panelName)\r\n        {\r\n            PanelViewModel pViewModel = GetPanel(panelName);\r\n\r\n            if (pViewModel != null)\r\n            {\r\n                if (pViewModel.onActive != null)\r\n                {\r\n                    pViewModel.onActive(pViewModel);\r\n                }\r\n                pViewModel.isActive = true;\r\n            }\r\n        }\r\n\r\n        private void DeactiveAPanel(string panelName)\r\n        {\r\n            PanelViewModel pViewModel = GetPanel(panelName);\r\n            if (pViewModel != null)\r\n            {\r\n                if (pViewModel.onDeactive != null)\r\n                {\r\n                    pViewModel.onDeactive(pViewModel);\r\n                }\r\n                pViewModel.isActive = false;\r\n            }\r\n        }\r\n\r\n        private void ShowAndBGMChangeOpen(string panelName, string curBGM)\r\n        {\r\n            // Prev Scene\r\n            PanelViewModel panel = GetPanel(panelName);\r\n\r\n            if (panel != null)\r\n            {\r\n                panel.FocusPanel.OnNext(new FocusPanelCommand() { isFocus = true });\r\n                panel.ShowPanel.OnNext(new ShowPanelCommand());\r\n            }\r\n\r\n            // On Scene Showed\r\n            if (MenuRoot.onSceneFocus != null)\r\n            {\r\n                MenuRoot.onSceneFocus(panelName);\r\n            }\r\n\r\n            // BGM change\r\n            if (panel != null)\r\n            {\r\n                BGMSceneOpen(curBGM, panel);\r\n            }\r\n        }\r\n\r\n        private void ShowAndBGMChangeClose(string panelName)\r\n        {\r\n            // Prev Scene\r\n            PanelViewModel panel = GetPanel(panelName);\r\n\r\n            // On Show\r\n            if (panel != null)\r\n            {\r\n                panel.FocusPanel.OnNext(new FocusPanelCommand() { isFocus = true });\r\n            }\r\n\r\n            // On Scene Showed\r\n            if (MenuRoot.onSceneFocus != null)\r\n            {\r\n                MenuRoot.onSceneFocus(panelName);\r\n            }\r\n\r\n            // BGM change\r\n            if (panel != null)\r\n            {\r\n                BGMSceneClose(panel);\r\n            }\r\n        }\r\n\r\n        protected void BGMSceneOpen(string curBGM, PanelViewModel panel)\r\n        {\r\n            if (!string.IsNullOrEmpty(MenuRoot.m_GlobalBGM))\r\n            {\r\n                PlayBGM(MenuRoot.m_GlobalBGM);\r\n            }\r\n            else\r\n            {\r\n                switch (panel.BGMType)\r\n                {\r\n                    case BGM.NONE:\r\n                        StopBGM();\r\n                        break;\r\n\r\n                    case BGM.PLAY:\r\n                        panel.CurrentBGM = panel.BGMName;\r\n                        if (!string.IsNullOrEmpty(panel.BGMName))\r\n                        {\r\n                            PlayBGM(panel.BGMName);\r\n                        }\r\n                        break;\r\n\r\n                    case BGM.SAME:\r\n                        panel.CurrentBGM = curBGM;\r\n                        if (!string.IsNullOrEmpty(curBGM))\r\n                        {\r\n                            PlayBGM(curBGM);\r\n                        }\r\n                        break;\r\n                    case BGM.CUSTOM:\r\n                        StopBGM();\r\n                        panel.CurrentBGM = panel.BGMName;\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        protected void BGMSceneClose(PanelViewModel panel)\r\n        {\r\n            if (!string.IsNullOrEmpty(MenuRoot.m_GlobalBGM))\r\n            {\r\n                // Do nothing\r\n            }\r\n            else\r\n            {\r\n                switch (panel.BGMType)\r\n                {\r\n                    case BGM.NONE:\r\n                        StopBGM();\r\n                        break;\r\n\r\n                    case BGM.PLAY:\r\n                    case BGM.SAME:\r\n                    case BGM.CUSTOM:\r\n                        if (!string.IsNullOrEmpty(panel.CurrentBGM))\r\n                        {\r\n                            PlayBGM(panel.CurrentBGM);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        private PanelViewModel GetPanel(string panelName)\r\n        {\r\n            if (MenuRoot.m_DictAllPanel.ContainsKey(panelName))\r\n            {\r\n                return MenuRoot.m_DictAllPanel[panelName];\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private bool IsNotInExcept(string sn, List<string> exceptList)\r\n        {\r\n            bool isOk = true;\r\n            for (int i = 0; i < exceptList.Count; i++)\r\n            {\r\n                if (string.Compare(exceptList[i], sn) == 0)\r\n                {\r\n                    isOk = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return isOk;\r\n        }\r\n\r\n        public bool IsPanelInAnyStack(string panelName)\r\n        {\r\n            bool isInStack = false;\r\n\r\n            if (MenuRoot.m_CurrentStackScreen != null)\r\n            {\r\n                isInStack = MenuRoot.m_CurrentStackScreen.Contains(panelName);\r\n            }\r\n\r\n            isInStack = (isInStack || MenuRoot.m_StackPopUp.Contains(panelName));\r\n\r\n            return isInStack;\r\n        }\r\n        #endregion\r\n\r\n        #region TODO\r\n        /// <summary>\r\n        /// Raises the scene load event.\r\n        /// </summary>\r\n        protected virtual void OnPanelLoad(PanelViewModel panel)\r\n        {\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Raises the scene unload event.\r\n        /// </summary>\r\n        protected virtual void OnPanelUnLoad(PanelViewModel panel)\r\n        {\r\n\r\n        }\r\n\r\n        /// <summary>\r\n        /// Play the BGM. Override it.\r\n        /// </summary>\r\n        /// <param name=\"bgmName\">Bgm name.</param>\r\n        protected virtual void PlayBGM(string bgmName)\r\n        {\r\n            //Debug.LogWarning(\"Play BGM: \" + bgmName + \". You have to override function: PlayBGM\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Stops the BGM. Override it\r\n        /// </summary>\r\n        protected virtual void StopBGM()\r\n        {\r\n            //Debug.LogWarning(\"Stop BGM. You have to override function: StopBGM\");\r\n        }\r\n\r\n        protected virtual void Quit()\r\n        {\r\n            Debug.Log(\"Quit: Please override this\");\r\n        }\r\n\r\n        /// <summary>\r\n        /// Set the global bgm. All scenes will have same BGM until ClearGlobalBgm() called.\r\n        /// </summary>\r\n        /// <param name=\"bgmName\">Bgm name.</param>\r\n        public void SetGlobalBgm(string bgmName)\r\n        {\r\n            MenuRoot.m_GlobalBGM = bgmName;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Clears the global bgm.\r\n        /// </summary>\r\n        public void ClearGlobalBgm()\r\n        {\r\n            MenuRoot.m_GlobalBGM = string.Empty;\r\n        }\r\n#endregion\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class DestoryInactivePanelsCommandBase : object {\r\n        \r\n        private List<String> _exceptList;\r\n        \r\n        public List<String> exceptList {\r\n            get {\r\n                return _exceptList;\r\n            }\r\n            set {\r\n                _exceptList = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class HideLoadingCommandBase : object {\r\n        \r\n        private Boolean _isForceHide;\r\n        \r\n        public Boolean isForceHide {\r\n            get {\r\n                return _isForceHide;\r\n            }\r\n            set {\r\n                _isForceHide = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"isForceHide\", new JSONData(this.isForceHide));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"isForceHide\"] != null) {\r\n                this.isForceHide = node[\"isForceHide\"].AsBool;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class OpenScreenCommandBase : OpenPanelCommand {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class PanelLoadedEventBase : object {\r\n        \r\n        private String _panelName;\r\n        \r\n        private PanelViewModel _panelViewModel;\r\n        \r\n        public String panelName {\r\n            get {\r\n                return _panelName;\r\n            }\r\n            set {\r\n                _panelName = value;\r\n            }\r\n        }\r\n        \r\n        public PanelViewModel panelViewModel {\r\n            get {\r\n                return _panelViewModel;\r\n            }\r\n            set {\r\n                _panelViewModel = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"panelName\", new JSONData(this.panelName));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"panelName\"] != null) {\r\n                this.panelName = node[\"panelName\"].AsString;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class OpenSubScreenCommandBase : OpenPanelCommand {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class OpenMainMenuCommandBase : OpenPanelCommand {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class ShowLoadingCommandBase : object {\r\n        \r\n        private Single _alpha;\r\n        \r\n        private Single _timeOut;\r\n        \r\n        private Single _delay;\r\n        \r\n        private String _callBack;\r\n        \r\n        public Single alpha {\r\n            get {\r\n                return _alpha;\r\n            }\r\n            set {\r\n                _alpha = value;\r\n            }\r\n        }\r\n        \r\n        public Single timeOut {\r\n            get {\r\n                return _timeOut;\r\n            }\r\n            set {\r\n                _timeOut = value;\r\n            }\r\n        }\r\n        \r\n        public Single delay {\r\n            get {\r\n                return _delay;\r\n            }\r\n            set {\r\n                _delay = value;\r\n            }\r\n        }\r\n        \r\n        public String callBack {\r\n            get {\r\n                return _callBack;\r\n            }\r\n            set {\r\n                _callBack = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"alpha\", new JSONData(this.alpha));\r\n            jsonObject.Add(\"timeOut\", new JSONData(this.timeOut));\r\n            jsonObject.Add(\"delay\", new JSONData(this.delay));\r\n            jsonObject.Add(\"callBack\", new JSONData(this.callBack));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"alpha\"] != null) {\r\n                this.alpha = node[\"alpha\"].AsFloat;\r\n            }\r\n            if (node[\"timeOut\"] != null) {\r\n                this.timeOut = node[\"timeOut\"].AsFloat;\r\n            }\r\n            if (node[\"delay\"] != null) {\r\n                this.delay = node[\"delay\"].AsFloat;\r\n            }\r\n            if (node[\"callBack\"] != null) {\r\n                this.callBack = node[\"callBack\"].AsString;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class LockScreenEventBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class CreateLoadingCommandBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class HideMainMenuCommandBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class PanelUnloadEventBase : object {\r\n        \r\n        private String _panelName;\r\n        \r\n        public String panelName {\r\n            get {\r\n                return _panelName;\r\n            }\r\n            set {\r\n                _panelName = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"panelName\", new JSONData(this.panelName));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"panelName\"] != null) {\r\n                this.panelName = node[\"panelName\"].AsString;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class ClosePanelCommandBase : object {\r\n        \r\n        private Boolean _immediate;\r\n        \r\n        public Boolean immediate {\r\n            get {\r\n                return _immediate;\r\n            }\r\n            set {\r\n                _immediate = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"immediate\", new JSONData(this.immediate));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"immediate\"] != null) {\r\n                this.immediate = node[\"immediate\"].AsBool;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class OpenPanelCommandBase : object {\r\n        \r\n        private String _onDeactive;\r\n        \r\n        private object _data;\r\n        \r\n        private String _panelName;\r\n        \r\n        public String onDeactive {\r\n            get {\r\n                return _onDeactive;\r\n            }\r\n            set {\r\n                _onDeactive = value;\r\n            }\r\n        }\r\n        \r\n        public object data {\r\n            get {\r\n                return _data;\r\n            }\r\n            set {\r\n                _data = value;\r\n            }\r\n        }\r\n        \r\n        public String panelName {\r\n            get {\r\n                return _panelName;\r\n            }\r\n            set {\r\n                _panelName = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"onDeactive\", new JSONData(this.onDeactive));\r\n            jsonObject.Add(\"panelName\", new JSONData(this.panelName));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"onDeactive\"] != null) {\r\n                this.onDeactive = node[\"onDeactive\"].AsString;\r\n            }\r\n            if (node[\"panelName\"] != null) {\r\n                this.panelName = node[\"panelName\"].AsString;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class OpenPopupCommandBase : OpenPanelCommand {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class PreLoadPanelCommandBase : object {\r\n        \r\n        private String _panelName;\r\n        \r\n        public String panelName {\r\n            get {\r\n                return _panelName;\r\n            }\r\n            set {\r\n                _panelName = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            jsonObject.Add(\"panelName\", new JSONData(this.panelName));\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n            if (node[\"panelName\"] != null) {\r\n                this.panelName = node[\"panelName\"].AsString;\r\n            }\r\n        }\r\n    }\r\n    \r\n    public class ResetPanelCommandBase : object {\r\n        \r\n        private object _data;\r\n        \r\n        public object data {\r\n            get {\r\n                return _data;\r\n            }\r\n            set {\r\n                _data = value;\r\n            }\r\n        }\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class ShowMainMenuCommandBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class UnLockScreenEventBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n    \r\n    public class GoHomeScreenCommandBase : object {\r\n        \r\n        public virtual string Serialize() {\r\n            var jsonObject = new JSONClass();\r\n            return jsonObject.ToString();\r\n        }\r\n        \r\n        public virtual void Deserialize(string json) {\r\n            var node = JSON.Parse(json);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/DestoryInactivePanelsCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class DestoryInactivePanelsCommand : DestoryInactivePanelsCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/HideLoadingCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class HideLoadingCommand : HideLoadingCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/OpenScreenCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class OpenScreenCommand : OpenScreenCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/PanelLoadedEvent.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class PanelLoadedEvent : PanelLoadedEventBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/OpenSubScreenCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class OpenSubScreenCommand : OpenSubScreenCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/OpenMainMenuCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class OpenMainMenuCommand : OpenMainMenuCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/ShowLoadingCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n\r\n\r\n    public class ShowLoadingCommand : ShowLoadingCommandBase\r\n    {\r\n        public NoParamCallback callBack = null;\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/LockScreenEvent.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class LockScreenEvent : LockScreenEventBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/CreateLoadingCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class CreateLoadingCommand : CreateLoadingCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/HideMainMenuCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class HideMainMenuCommand : HideMainMenuCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/PanelUnloadEvent.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class PanelUnloadEvent : PanelUnloadEventBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/ClosePanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n\r\n\r\n    public class ClosePanelCommand : ClosePanelCommandBase\r\n    {\r\n        public NoParamCallback callback = null;\r\n\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/OpenPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class OpenPanelCommand : OpenPanelCommandBase\r\n    {\r\n        public PanelCallBackDelegate onActive = null;\r\n        public PanelCallBackDelegate onDeactive = null;\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/OpenPopupCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class OpenPopupCommand : OpenPopupCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/PreLoadPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class PreLoadPanelCommand : PreLoadPanelCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/ResetPanelCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n\r\n\r\n    public class ResetPanelCommand : ResetPanelCommandBase\r\n    {\r\n        public PanelCallBackDelegate onActive = null;\r\n        public PanelCallBackDelegate onDeactive = null;\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/ShowMainMenuCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class ShowMainMenuCommand : ShowMainMenuCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/UnLockScreenEvent.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class UnLockScreenEvent : UnLockScreenEventBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SimpleClasses/GoHomeScreenCommand.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Json;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    \r\n    \r\n    public class GoHomeScreenCommand : GoHomeScreenCommandBase {\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SystemLoaders.designer/MenuSystemLoader.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MenuSystemLoaderBase : uFrame.Kernel.SystemLoader {\r\n        \r\n        private MenuRootViewModel _MenuRoot;\r\n        \r\n        private PanelController _PanelController;\r\n        \r\n        private MenuRootController _MenuRootController;\r\n        \r\n        private MainMenuController _MainMenuController;\r\n        \r\n        private ShieldController _ShieldController;\r\n        \r\n        [uFrame.IOC.InjectAttribute(\"MenuRoot\")]\r\n        public virtual MenuRootViewModel MenuRoot {\r\n            get {\r\n                if (this._MenuRoot == null) {\r\n                    this._MenuRoot = this.CreateViewModel<MenuRootViewModel>( \"MenuRoot\");\r\n                }\r\n                return _MenuRoot;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute()]\r\n        public virtual PanelController PanelController {\r\n            get {\r\n                if (_PanelController==null) {\r\n                    _PanelController = Container.CreateInstance(typeof(PanelController)) as PanelController;;\r\n                }\r\n                return _PanelController;\r\n            }\r\n            set {\r\n                _PanelController = value;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute()]\r\n        public virtual MenuRootController MenuRootController {\r\n            get {\r\n                if (_MenuRootController==null) {\r\n                    _MenuRootController = Container.CreateInstance(typeof(MenuRootController)) as MenuRootController;;\r\n                }\r\n                return _MenuRootController;\r\n            }\r\n            set {\r\n                _MenuRootController = value;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute()]\r\n        public virtual MainMenuController MainMenuController {\r\n            get {\r\n                if (_MainMenuController==null) {\r\n                    _MainMenuController = Container.CreateInstance(typeof(MainMenuController)) as MainMenuController;;\r\n                }\r\n                return _MainMenuController;\r\n            }\r\n            set {\r\n                _MainMenuController = value;\r\n            }\r\n        }\r\n        \r\n        [uFrame.IOC.InjectAttribute()]\r\n        public virtual ShieldController ShieldController {\r\n            get {\r\n                if (_ShieldController==null) {\r\n                    _ShieldController = Container.CreateInstance(typeof(ShieldController)) as ShieldController;;\r\n                }\r\n                return _ShieldController;\r\n            }\r\n            set {\r\n                _ShieldController = value;\r\n            }\r\n        }\r\n        \r\n        public override void Load() {\r\n            Container.RegisterViewModelManager<PanelViewModel>(new ViewModelManager<PanelViewModel>());\r\n            Container.RegisterController<PanelController>(PanelController);\r\n            Container.RegisterViewModelManager<MenuRootViewModel>(new ViewModelManager<MenuRootViewModel>());\r\n            Container.RegisterController<MenuRootController>(MenuRootController);\r\n            Container.RegisterViewModelManager<MainMenuViewModel>(new ViewModelManager<MainMenuViewModel>());\r\n            Container.RegisterController<MainMenuController>(MainMenuController);\r\n            Container.RegisterViewModelManager<ShieldViewModel>(new ViewModelManager<ShieldViewModel>());\r\n            Container.RegisterController<ShieldController>(ShieldController);\r\n            Container.RegisterViewModel<MenuRootViewModel>(MenuRoot, \"MenuRoot\");\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/SystemsLoaders/MenuSystemLoader.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using mvvmMenuSystem;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.IOC;\r\n    using uFrame.Kernel;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MenuSystemLoader : MenuSystemLoaderBase {\r\n        \r\n        public override void Load() {\r\n            base.Load();\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views.designer/PanelView.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class PanelViewBase : uFrame.MVVM.Views.ViewBase {\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public Single _depthIndex;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public String _panelName;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public Boolean _isCache;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public BGM _BGMType;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public String _CurrentBGM;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public Boolean _isActive;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public String _BGMName;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public Int32 _posIndex;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"PlayPanelAnimation\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindPlayPanelAnimation = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"DestroyPanel\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindDestroyPanel = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"HidePanel\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindHidePanel = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"ShowPanel\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindShowPanel = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"posIndex\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindposIndex = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"posIndex\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_posIndexonlyWhenChanged\")]\r\n        protected bool _posIndexOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"FocusPanel\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindFocusPanel = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"isActive\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindisActive = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"isActive\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_isActiveonlyWhenChanged\")]\r\n        protected bool _isActiveOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"SetPanelData\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindSetPanelData = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"depthIndex\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BinddepthIndex = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"depthIndex\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_depthIndexonlyWhenChanged\")]\r\n        protected bool _depthIndexOnlyWhenChanged;\r\n        \r\n        public override string DefaultIdentifier {\r\n            get {\r\n                return base.DefaultIdentifier;\r\n            }\r\n        }\r\n        \r\n        public override System.Type ViewModelType {\r\n            get {\r\n                return typeof(PanelViewModel);\r\n            }\r\n        }\r\n        \r\n        public PanelViewModel Panel {\r\n            get {\r\n                return (PanelViewModel)ViewModelObject;\r\n            }\r\n        }\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as PanelViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n            var panelview = ((PanelViewModel)model);\r\n            panelview.depthIndex = this._depthIndex;\r\n            panelview.panelName = this._panelName;\r\n            panelview.isCache = this._isCache;\r\n            panelview.BGMType = this._BGMType;\r\n            panelview.CurrentBGM = this._CurrentBGM;\r\n            panelview.isActive = this._isActive;\r\n            panelview.BGMName = this._BGMName;\r\n            panelview.posIndex = this._posIndex;\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.Panel to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n            if (_BindPlayPanelAnimation) {\r\n                this.BindCommandExecuted(this.Panel.PlayPanelAnimation, this.PlayPanelAnimationExecuted);\r\n            }\r\n            if (_BindDestroyPanel) {\r\n                this.BindCommandExecuted(this.Panel.DestroyPanel, this.DestroyPanelExecuted);\r\n            }\r\n            if (_BindHidePanel) {\r\n                this.BindCommandExecuted(this.Panel.HidePanel, this.HidePanelExecuted);\r\n            }\r\n            if (_BindShowPanel) {\r\n                this.BindCommandExecuted(this.Panel.ShowPanel, this.ShowPanelExecuted);\r\n            }\r\n            if (_BindposIndex) {\r\n                this.BindProperty(this.Panel.posIndexProperty, this.posIndexChanged, _posIndexOnlyWhenChanged);\r\n            }\r\n            if (_BindFocusPanel) {\r\n                this.BindCommandExecuted(this.Panel.FocusPanel, this.FocusPanelExecuted);\r\n            }\r\n            if (_BindisActive) {\r\n                this.BindProperty(this.Panel.isActiveProperty, this.isActiveChanged, _isActiveOnlyWhenChanged);\r\n            }\r\n            if (_BindSetPanelData) {\r\n                this.BindCommandExecuted(this.Panel.SetPanelData, this.SetPanelDataExecuted);\r\n            }\r\n            if (_BinddepthIndex) {\r\n                this.BindProperty(this.Panel.depthIndexProperty, this.depthIndexChanged, _depthIndexOnlyWhenChanged);\r\n            }\r\n        }\r\n        \r\n        public virtual void PlayPanelAnimationExecuted(PlayPanelAnimationCommand command) {\r\n        }\r\n        \r\n        public virtual void DestroyPanelExecuted(DestroyPanelCommand command) {\r\n        }\r\n        \r\n        public virtual void HidePanelExecuted(HidePanelCommand command) {\r\n        }\r\n        \r\n        public virtual void ShowPanelExecuted(ShowPanelCommand command) {\r\n        }\r\n        \r\n        public virtual void posIndexChanged(Int32 arg1) {\r\n        }\r\n        \r\n        public virtual void FocusPanelExecuted(FocusPanelCommand command) {\r\n        }\r\n        \r\n        public virtual void isActiveChanged(Boolean arg1) {\r\n        }\r\n        \r\n        public virtual void SetPanelDataExecuted(SetPanelDataCommand command) {\r\n        }\r\n        \r\n        public virtual void depthIndexChanged(Single arg1) {\r\n        }\r\n        \r\n        public virtual void ExecuteFocusPanel(FocusPanelCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.FocusPanel.OnNext(command);\r\n        }\r\n        \r\n        public virtual void ExecuteHidePanel(HidePanelCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.HidePanel.OnNext(command);\r\n        }\r\n        \r\n        public virtual void ExecuteShowPanel(ShowPanelCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.ShowPanel.OnNext(command);\r\n        }\r\n        \r\n        public virtual void ExecuteSetPanelData(SetPanelDataCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.SetPanelData.OnNext(command);\r\n        }\r\n        \r\n        public virtual void ExecutePlayPanelAnimation(PlayPanelAnimationCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.PlayPanelAnimation.OnNext(command);\r\n        }\r\n        \r\n        public virtual void ExecuteDestroyPanel(DestroyPanelCommand command) {\r\n            command.Sender = Panel;\r\n            Panel.DestroyPanel.OnNext(command);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views/PanelView.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n\r\n    public enum UIType\r\n    {\r\n        uGUI,\r\n        nGUI\r\n    }\r\n    \r\n    public class PanelView : PanelViewBase \r\n    {\r\n        public UIType uiType = UIType.nGUI;\r\n\r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as PanelViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.Panel to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n            this.Publish(new PanelLoadedEvent()\r\n            {\r\n                panelName = this.gameObject.name,\r\n                panelViewModel = Panel\r\n            });\r\n        }\r\n\r\n        public override void posIndexChanged(int arg1)\r\n        {\r\n            base.posIndexChanged(arg1);\r\n\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n                    this.transform.localPosition = Vector3.zero;\r\n                    break;\r\n                case UIType.uGUI:\r\n                    this.transform.localPosition = Vector3.zero;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        public override void depthIndexChanged(float arg1)\r\n        {\r\n            base.depthIndexChanged(arg1);\r\n\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n                    SetPanels(arg1);\r\n                    break;\r\n                case UIType.uGUI:\r\n                    SetCanvas(arg1);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        private void SetPanels(float depth)\r\n        {\r\n#if UI_NGUI\r\n            // Sort by depth\r\n            List<UIPanel> panels = new List<UIPanel>(this.gameObject.GetComponentsInChildren<UIPanel>(true));\r\n            panels = panels.OrderBy(n => n.depth).ToList<UIPanel>();\r\n\r\n            // Re-set depth\r\n            int count = 0;\r\n            foreach (UIPanel panel in panels)\r\n            {\r\n                panel.depth = Mathf.RoundToInt(depth * MenuConst.DEPTH_DISTANCE) + count + 1;\r\n                count++;\r\n            }\r\n#endif\r\n        }\r\n\r\n        private void SetCanvas(float depth)\r\n        {\r\n#if UI_UGUI\r\n            // Sort by sorting order\r\n            List<Canvas> canvases = new List<Canvas>(this.gameObject.GetComponentsInChildren<Canvas>(true));\r\n            canvases = canvases.OrderBy(n => n.sortingOrder).ToList<Canvas>();\r\n\r\n            // Re-set depth\r\n            int count = 0;\r\n            foreach (Canvas canvas in canvases)\r\n            {\r\n                canvas.sortingOrder = Mathf.RoundToInt(depth * MenuConst.DEPTH_DISTANCE) + count + 1;\r\n                count++;\r\n\r\n                canvas.enabled = false;\r\n                canvas.enabled = true;\r\n\r\n                canvas.worldCamera = CameraHelper.UICamera;\r\n            }\r\n#endif\r\n        }\r\n\r\n        public override void isActiveChanged(bool arg1)\r\n        {\r\n            base.isActiveChanged(arg1);\r\n            this.gameObject.SetActive(arg1);\r\n        }\r\n\r\n        public override void PlayPanelAnimationExecuted(PlayPanelAnimationCommand command)\r\n        {\r\n            base.PlayPanelAnimationExecuted(command);\r\n            StartCoroutine(IEPlayAnimation(command.panelAnimType, command.onAniFinish));\r\n        }\r\n\r\n        private IEnumerator IEPlayAnimation(AnimType animType, NoParamCallback callback = null)\r\n        {\r\n            MenuMotion ani = this.gameObject.GetComponentInChildren<MenuMotion>();\r\n            if (ani != null && animType != AnimType.NO_ANIM)\r\n            {\r\n                ani.Reset(animType);\r\n\r\n                yield return null;\r\n\r\n                NoParamCallback play = null;\r\n                float time = 0;\r\n\r\n                switch (animType)\r\n                {\r\n                    case AnimType.SHOW:\r\n                        play = ani.PlayShow;\r\n                        time = ani.TimeShow();\r\n                        break;\r\n                    case AnimType.SHOW_BACK:\r\n                        play = ani.PlayShowBack;\r\n                        time = ani.TimeShowBack();\r\n                        break;\r\n                    case AnimType.HIDE:\r\n                        play = ani.PlayHide;\r\n                        time = ani.TimeHide();\r\n                        break;\r\n                    case AnimType.HIDE_BACK:\r\n                        play = ani.PlayHideBack;\r\n                        time = ani.TimeHideBack();\r\n                        break;\r\n                }\r\n\r\n                if (play != null)\r\n                {\r\n                    play();\r\n                }\r\n                yield return StartCoroutine(Pause(time));\r\n                yield return new WaitForEndOfFrame();\r\n\r\n                OnAnimationFinish();\r\n\r\n                if (callback != null)\r\n                    callback();\r\n\r\n            }\r\n            else\r\n            {\r\n                if (animType == AnimType.NO_ANIM && ani != null)\r\n                {\r\n                    MoveAnimTransformPosition(ani, 0);\r\n                }\r\n\r\n                if (callback != null)\r\n                    callback();\r\n            }\r\n        }\r\n\r\n        private IEnumerator Pause(float time)\r\n        {\r\n            float pauseEndTime = Time.realtimeSinceStartup + time;\r\n            while (Time.realtimeSinceStartup < pauseEndTime)\r\n            {\r\n                yield return 0;\r\n            }\r\n            yield return 0;\r\n        }\r\n\r\n        /// <summary>\r\n        /// We should bring this scene to somewhere far when it awake.\r\n        /// Then the animation will automatically bring it back at next frame.\r\n        /// This trick remove flicker at the first frame.\r\n        /// </summary>\r\n        /// <param name=\"scene\">Scene.</param>\r\n        public void BringAnimationToVeryFar()\r\n        {\r\n            MenuMotion motion = this.transform.GetComponentInChildren<MenuMotion>();\r\n\r\n            if (motion != null)\r\n            {\r\n                MoveAnimTransformPosition(motion, 99999);\r\n            }\r\n        }\r\n\r\n        private void MoveAnimTransformPosition(MenuMotion an, float x)\r\n        {\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n                    an.transform.localPosition = new Vector3(x, 0, 0);\r\n                    break;\r\n                case UIType.uGUI:\r\n                    an.GetComponent<RectTransform>().anchoredPosition = new Vector2(x, 0);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Raises the animation finish event.\r\n        /// </summary>\r\n        /// <param name=\"sceneName\">Scene name.</param>\r\n        protected virtual void OnAnimationFinish()\r\n        {\r\n            //Debug.Log(\"If you have the problem with NGUI which display not correctly when animation finish, you can SetDirty() to all UIPanel in UIPanel.list in this event for a refresh.\");\r\n        }\r\n\r\n        public override void DestroyPanelExecuted(DestroyPanelCommand command)\r\n        {\r\n            base.DestroyPanelExecuted(command);\r\n            Destroy(this.gameObject);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views.designer/MenuRootView.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MenuRootViewBase : uFrame.MVVM.Views.ViewBase {\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public uFrame.MVVM.Views.ViewBase _shieldEmpty;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public uFrame.MVVM.Views.ViewBase _mainMenu;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public uFrame.MVVM.Views.ViewBase _loadingTop;\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public uFrame.MVVM.Views.ViewBase _shieldTop;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"shieldEmpty\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindshieldEmpty = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"shieldEmpty\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_shieldEmptyonlyWhenChanged\")]\r\n        protected bool _shieldEmptyOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"shieldTop\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindshieldTop = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"shieldTop\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_shieldToponlyWhenChanged\")]\r\n        protected bool _shieldTopOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"loadingTop\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindloadingTop = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"loadingTop\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_loadingToponlyWhenChanged\")]\r\n        protected bool _loadingTopOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"mainMenu\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindmainMenu = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"mainMenu\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_mainMenuonlyWhenChanged\")]\r\n        protected bool _mainMenuOnlyWhenChanged;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"LoadPanel\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindLoadPanel = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"Shields\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindShields = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"Panels\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _BindPanels = true;\r\n        \r\n        public override string DefaultIdentifier {\r\n            get {\r\n                return \"MenuRoot\";\r\n            }\r\n        }\r\n        \r\n        public override System.Type ViewModelType {\r\n            get {\r\n                return typeof(MenuRootViewModel);\r\n            }\r\n        }\r\n        \r\n        public MenuRootViewModel MenuRoot {\r\n            get {\r\n                return (MenuRootViewModel)ViewModelObject;\r\n            }\r\n        }\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as MenuRootViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n            var menurootview = ((MenuRootViewModel)model);\r\n            menurootview.shieldEmpty = this._shieldEmpty == null ? null :  ViewService.FetchViewModel(this._shieldEmpty) as ShieldViewModel;\r\n            menurootview.mainMenu = this._mainMenu == null ? null :  ViewService.FetchViewModel(this._mainMenu) as MainMenuViewModel;\r\n            menurootview.loadingTop = this._loadingTop == null ? null :  ViewService.FetchViewModel(this._loadingTop) as PanelViewModel;\r\n            menurootview.shieldTop = this._shieldTop == null ? null :  ViewService.FetchViewModel(this._shieldTop) as ShieldViewModel;\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.MenuRoot to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n            if (_BindshieldEmpty) {\r\n                this.BindProperty(this.MenuRoot.shieldEmptyProperty, this.shieldEmptyChanged, _shieldEmptyOnlyWhenChanged);\r\n            }\r\n            if (_BindshieldTop) {\r\n                this.BindProperty(this.MenuRoot.shieldTopProperty, this.shieldTopChanged, _shieldTopOnlyWhenChanged);\r\n            }\r\n            if (_BindloadingTop) {\r\n                this.BindProperty(this.MenuRoot.loadingTopProperty, this.loadingTopChanged, _loadingTopOnlyWhenChanged);\r\n            }\r\n            if (_BindmainMenu) {\r\n                this.BindProperty(this.MenuRoot.mainMenuProperty, this.mainMenuChanged, _mainMenuOnlyWhenChanged);\r\n            }\r\n            if (_BindLoadPanel) {\r\n                this.BindCommandExecuted(this.MenuRoot.LoadPanel, this.LoadPanelExecuted);\r\n            }\r\n            if (_BindShields) {\r\n                this.BindCollection(this.MenuRoot.Shields, this.ShieldsOnAdd, this.ShieldsOnRemove);\r\n            }\r\n            if (_BindPanels) {\r\n                this.BindCollection(this.MenuRoot.Panels, this.PanelsOnAdd, this.PanelsOnRemove);\r\n            }\r\n        }\r\n        \r\n        public virtual void shieldEmptyChanged(ShieldViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void shieldTopChanged(ShieldViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void loadingTopChanged(PanelViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void mainMenuChanged(MainMenuViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void LoadPanelExecuted(LoadPanelCommand command) {\r\n        }\r\n        \r\n        public virtual void ShieldsOnAdd(ShieldViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void ShieldsOnRemove(ShieldViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void PanelsOnAdd(PanelViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void PanelsOnRemove(PanelViewModel arg1) {\r\n        }\r\n        \r\n        public virtual void ExecuteLoadPanel(LoadPanelCommand command) {\r\n            command.Sender = MenuRoot;\r\n            MenuRoot.LoadPanel.OnNext(command);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views/MenuRootView.cs"			, 
			"Code":"namespace mvvmMenuSystem\r\n{\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n\r\n\r\n    public class MenuRootView : MenuRootViewBase\r\n    {\r\n\r\n        public UIType uiType = UIType.nGUI;\r\n        private GameObject m_Scenes;\t\t\t// Scene container object\r\n        private GameObject m_Shields;\t\t\t// Shield container object\r\n\r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model)\r\n        {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as MenuRootViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n        }\r\n\r\n        public override void Bind()\r\n        {\r\n            base.Bind();\r\n            // Use this.MenuRoot to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n\r\n            m_Scenes = new GameObject(\"Scenes\");\r\n            m_Shields = new GameObject(\"Shields\");\r\n\r\n            m_Scenes.transform.SetParent(this.transform);//.parent = this.transform;\r\n            m_Scenes.transform.localScale = Vector3.one;\r\n            m_Scenes.transform.localPosition = Vector3.zero;\r\n\r\n            m_Shields.transform.SetParent(this.transform);//parent = this.transform;\r\n            m_Shields.transform.localScale = Vector3.one;\r\n            m_Shields.transform.localPosition = Vector3.zero;\r\n\r\n            this.Publish(new CreateLoadingCommand());\r\n            this.Publish(new OpenMainMenuCommand() { panelName = \"MainMenu\" });\r\n        }\r\n\r\n        public override void shieldTopChanged(ShieldViewModel arg1)\r\n        {\r\n            base.shieldTopChanged(arg1);\r\n            if (arg1 != null)\r\n            {\r\n                CreateShield((int)arg1.depthIndex, arg1);\r\n            }\r\n        }\r\n\r\n        public override void shieldEmptyChanged(ShieldViewModel arg1)\r\n        {\r\n            base.shieldEmptyChanged(arg1);\r\n            if (arg1 != null)\r\n            {\r\n                CreateShield((int)arg1.depthIndex, arg1);\r\n            }\r\n        }\r\n\r\n        public override void ShieldsOnAdd(ShieldViewModel arg1)\r\n        {\r\n            base.ShieldsOnAdd(arg1);\r\n            CreateShield((int)arg1.depthIndex, arg1);\r\n        }\r\n\r\n        private void CreateShield(int i, ShieldViewModel sVM)\r\n        {\r\n            // Instantiate from resources\r\n            GameObject sh = null;\r\n\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n                    sh = Instantiate(Resources.Load(\"nGUIShield\")) as GameObject;\r\n                    break;\r\n                case UIType.uGUI:\r\n                    sh = Instantiate(Resources.Load(\"uGUIShield\")) as GameObject;\r\n                    break;\r\n            }\r\n\r\n            sh.name = \"Shield\" + i;\r\n            sh.transform.SetParent(m_Shields.transform, true);\r\n            sh.transform.localScale = Vector3.one;\r\n\r\n            ShieldView sView = sh.GetComponent<ShieldView>();\r\n            sView.ViewModelObject = sVM;\r\n        }\r\n\r\n        public override void loadingTopChanged(PanelViewModel arg1)\r\n        {\r\n            base.loadingTopChanged(arg1);\r\n            if (arg1 != null)\r\n            {\r\n                StartCoroutine(SyncLoadLoadingTop(arg1));                \r\n            }\r\n        }\r\n\r\n        private IEnumerator SyncLoadLoadingTop(PanelViewModel obj)\r\n        {\r\n            yield return UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(MenuRoot.m_LoadingPanelName, UnityEngine.SceneManagement.LoadSceneMode.Additive);\r\n            //GameObject[] roots = UnityEngine.SceneManagement.SceneManager.GetSceneByName(MenuRoot.m_LoadingSceneName).GetRootGameObjects();\r\n            GameObject menuRoot = GameObject.Find(MenuRoot.m_LoadingPanelName);//roots[0];\r\n            menuRoot.transform.SetParent(this.transform);\r\n            menuRoot.transform.localScale = Vector3.one;\r\n            menuRoot.name = menuRoot.name + \"Top\";\r\n\r\n            PanelView menuView = menuRoot.GetComponent<PanelView>();\r\n            menuView.ViewModelObject = obj;\r\n\r\n            UnityEngine.SceneManagement.SceneManager.UnloadScene(MenuRoot.m_LoadingPanelName);\r\n        }\r\n\r\n        public override void LoadPanelExecuted(LoadPanelCommand command)\r\n        {\r\n            base.LoadPanelExecuted(command);\r\n\r\n            if (MenuRoot.m_DictAllPanel.ContainsKey(command.panelName))\r\n            {\r\n                Debug.LogWarning(\"Loaded this scene before. Please check again.\");\r\n                return;\r\n            }\r\n\r\n            StartCoroutine(SyncLoadMenu(command));\r\n        }\r\n\r\n        private IEnumerator SyncLoadMenu(LoadPanelCommand command)\r\n        {\r\n            yield return UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(command.panelName, UnityEngine.SceneManagement.LoadSceneMode.Additive);\r\n            //GameObject[] roots = UnityEngine.SceneManagement.SceneManager.GetSceneByName(command.menuName).GetRootGameObjects();\r\n\r\n            GameObject menuHolder = GameObject.Find(command.panelName);//roots[0];\r\n            menuHolder.transform.SetParent(this.m_Scenes.transform);\r\n            menuHolder.transform.localScale = Vector3.one;\r\n            PanelView menuView = menuHolder.GetComponent<PanelView>();\r\n            menuView.BringAnimationToVeryFar();\r\n\r\n            UnityEngine.SceneManagement.SceneManager.UnloadScene(command.panelName);\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views.designer/MainMenuView.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MainMenuViewBase : PanelView {\r\n        \r\n        public override string DefaultIdentifier {\r\n            get {\r\n                return base.DefaultIdentifier;\r\n            }\r\n        }\r\n        \r\n        public override System.Type ViewModelType {\r\n            get {\r\n                return typeof(MainMenuViewModel);\r\n            }\r\n        }\r\n        \r\n        public MainMenuViewModel MainMenu {\r\n            get {\r\n                return (MainMenuViewModel)ViewModelObject;\r\n            }\r\n        }\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as MainMenuViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.MainMenu to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views/MainMenuView.cs"			, 
			"Code":"namespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class MainMenuView : MainMenuViewBase {\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as MainMenuViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.MainMenu to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views.designer/ShieldView.designer.cs"			, 
			"Code":"// ------------------------------------------------------------------------------\r\n//  <autogenerated>\r\n//      This code was generated by a tool.\r\n//      Mono Runtime Version: 2.0.50727.1433\r\n// \r\n//      Changes to this file may cause incorrect behavior and will be lost if \r\n//      the code is regenerated.\r\n//  </autogenerated>\r\n// ------------------------------------------------------------------------------\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class ShieldViewBase : PanelView {\r\n        \r\n        [UnityEngine.SerializeField()]\r\n        [uFrame.MVVM.Attributes.UFGroup(\"View Model Properties\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public Color _color;\r\n        \r\n        [uFrame.MVVM.Attributes.UFToggleGroup(\"color\")]\r\n        [UnityEngine.HideInInspector()]\r\n        public bool _Bindcolor = true;\r\n        \r\n        [uFrame.MVVM.Attributes.UFGroup(\"color\")]\r\n        [UnityEngine.SerializeField()]\r\n        [UnityEngine.HideInInspector()]\r\n        [UnityEngine.Serialization.FormerlySerializedAsAttribute(\"_coloronlyWhenChanged\")]\r\n        protected bool _colorOnlyWhenChanged;\r\n        \r\n        public override string DefaultIdentifier {\r\n            get {\r\n                return base.DefaultIdentifier;\r\n            }\r\n        }\r\n        \r\n        public override System.Type ViewModelType {\r\n            get {\r\n                return typeof(ShieldViewModel);\r\n            }\r\n        }\r\n        \r\n        public ShieldViewModel Shield {\r\n            get {\r\n                return (ShieldViewModel)ViewModelObject;\r\n            }\r\n        }\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as ShieldViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n            var shieldview = ((ShieldViewModel)model);\r\n            shieldview.color = this._color;\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.Shield to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n            if (_Bindcolor) {\r\n                this.BindProperty(this.Shield.colorProperty, this.colorChanged, _colorOnlyWhenChanged);\r\n            }\r\n        }\r\n        \r\n        public virtual void colorChanged(Color arg1) {\r\n        }\r\n    }\r\n}\r\n"		}
, 		{
			"RelativePath":"/MenuSystem/Views/ShieldView.cs"			, 
			"Code":"using UnityEngine.UI;\r\n\r\nnamespace mvvmMenuSystem {\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.Linq;\r\n    using uFrame.Kernel;\r\n    using uFrame.Kernel.Serialization;\r\n    using uFrame.MVVM;\r\n    using uFrame.MVVM.Bindings;\r\n    using uFrame.MVVM.Services;\r\n    using uFrame.MVVM.ViewModels;\r\n    using UniRx;\r\n    using UnityEngine;\r\n    \r\n    \r\n    public class ShieldView : ShieldViewBase {\r\n        \r\n        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {\r\n            base.InitializeViewModel(model);\r\n            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.\r\n            // var vm = model as ShieldViewModel;\r\n            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.\r\n        }\r\n        \r\n        public override void Bind() {\r\n            base.Bind();\r\n            // Use this.Shield to access the viewmodel.\r\n            // Use this method to subscribe to the view-model.\r\n            // Any designer bindings are created in the base implementation.\r\n        }\r\n\r\n        public override void colorChanged(Color arg1)\r\n        {\r\n            base.colorChanged(arg1);\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n#if UI_NGUI\r\n                    UISprite sprite = this.gameObject.GetComponentInChildren<UISprite>();\r\n                    sprite.color = arg1;\r\n#endif\r\n                    break;\r\n                case UIType.uGUI:\r\n#if UI_UGUI\r\n                    Image image = this.gameObject.GetComponentInChildren<Image>();\r\n                    image.color = arg1;\r\n#endif\r\n                    break;\r\n            }\r\n        }\r\n\r\n        public override void depthIndexChanged(float arg1)\r\n        {\r\n            switch (uiType)\r\n            {\r\n                case UIType.nGUI:\r\n#if UI_NGUI\r\n                    UIPanel panel = this.gameObject.GetComponentInChildren<UIPanel>();\r\n                    panel.depth = (int)((arg1 + 1) * MenuConst.DEPTH_DISTANCE);\r\n#endif\r\n                    break;\r\n                case UIType.uGUI:\r\n#if UI_UGUI\r\n                    Canvas cv = this.gameObject.GetComponentInChildren<Canvas>();\r\n                    cv.sortingOrder = ((int)arg1 + 1) * MenuConst.DEPTH_DISTANCE;\r\n                    cv.worldCamera = CameraHelper.UICamera;\r\n#endif\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"		}
 ]
}
