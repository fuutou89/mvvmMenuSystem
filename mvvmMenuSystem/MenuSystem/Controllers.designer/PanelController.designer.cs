// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace mvvmMenuSystem {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public class PanelControllerBase : uFrame.MVVM.Controller {
        
        private uFrame.MVVM.ViewModels.IViewModelManager _PanelViewModelManager;
        
        private MenuRootViewModel _MenuRoot;
        
        [uFrame.IOC.InjectAttribute("Panel")]
        public uFrame.MVVM.ViewModels.IViewModelManager PanelViewModelManager {
            get {
                return _PanelViewModelManager;
            }
            set {
                _PanelViewModelManager = value;
            }
        }
        
        [uFrame.IOC.InjectAttribute("MenuRoot")]
        public MenuRootViewModel MenuRoot {
            get {
                return _MenuRoot;
            }
            set {
                _MenuRoot = value;
            }
        }
        
        public IEnumerable<PanelViewModel> PanelViewModels {
            get {
                return PanelViewModelManager.OfType<PanelViewModel>();
            }
        }
        
        public override void Setup() {
            base.Setup();
            // This is called when the controller is created
        }
        
        public override void Initialize(uFrame.MVVM.ViewModels.ViewModel viewModel) {
            base.Initialize(viewModel);
            // This is called when a viewmodel is created
            this.InitializePanel(((PanelViewModel)(viewModel)));
        }
        
        public virtual PanelViewModel CreatePanel() {
            return ((PanelViewModel)(this.Create(Guid.NewGuid().ToString())));
        }
        
        public override uFrame.MVVM.ViewModels.ViewModel CreateEmpty() {
            return new PanelViewModel(this.EventAggregator);
        }
        
        public virtual void InitializePanel(PanelViewModel viewModel) {
            // This is called when a PanelViewModel is created
            viewModel.FocusPanel.Action = this.FocusPanelHandler;
            viewModel.HidePanel.Action = this.HidePanelHandler;
            viewModel.ShowPanel.Action = this.ShowPanelHandler;
            viewModel.SetPanelData.Action = this.SetPanelDataHandler;
            viewModel.PlayPanelAnimation.Action = this.PlayPanelAnimationHandler;
            viewModel.DestroyPanel.Action = this.DestroyPanelHandler;
            PanelViewModelManager.Add(viewModel);
        }
        
        public override void DisposingViewModel(uFrame.MVVM.ViewModels.ViewModel viewModel) {
            base.DisposingViewModel(viewModel);
            PanelViewModelManager.Remove(viewModel);
        }
        
        public virtual void HidePanel(PanelViewModel viewModel) {
        }
        
        public virtual void ShowPanel(PanelViewModel viewModel) {
        }
        
        public virtual void DestroyPanel(PanelViewModel viewModel) {
        }
        
        public virtual void FocusPanelHandler(FocusPanelCommand command) {
            this.FocusPanel(command.Sender as PanelViewModel, command);
        }
        
        public virtual void HidePanelHandler(HidePanelCommand command) {
            this.HidePanel(command.Sender as PanelViewModel);
        }
        
        public virtual void ShowPanelHandler(ShowPanelCommand command) {
            this.ShowPanel(command.Sender as PanelViewModel);
        }
        
        public virtual void SetPanelDataHandler(SetPanelDataCommand command) {
            this.SetPanelData(command.Sender as PanelViewModel, command);
        }
        
        public virtual void PlayPanelAnimationHandler(PlayPanelAnimationCommand command) {
            this.PlayPanelAnimation(command.Sender as PanelViewModel, command);
        }
        
        public virtual void DestroyPanelHandler(DestroyPanelCommand command) {
            this.DestroyPanel(command.Sender as PanelViewModel);
        }
        
        public virtual void FocusPanel(PanelViewModel viewModel, FocusPanelCommand arg) {
        }
        
        public virtual void SetPanelData(PanelViewModel viewModel, SetPanelDataCommand arg) {
        }
        
        public virtual void PlayPanelAnimation(PanelViewModel viewModel, PlayPanelAnimationCommand arg) {
        }
    }
}
