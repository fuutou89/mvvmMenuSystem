// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace mvvmMenuSystem {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class PanelViewBase : uFrame.MVVM.Views.ViewBase {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Single _depthIndex;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _panelName;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Boolean _isCache;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public BGM _BGMType;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _CurrentBGM;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Boolean _isActive;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _BGMName;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _posIndex;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(PanelViewModel);
            }
        }
        
        public PanelViewModel Panel {
            get {
                return (PanelViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as PanelViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var panelview = ((PanelViewModel)model);
            panelview.depthIndex = this._depthIndex;
            panelview.panelName = this._panelName;
            panelview.isCache = this._isCache;
            panelview.BGMType = this._BGMType;
            panelview.CurrentBGM = this._CurrentBGM;
            panelview.isActive = this._isActive;
            panelview.BGMName = this._BGMName;
            panelview.posIndex = this._posIndex;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Panel to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
        
        public virtual void ExecuteFocusPanel(FocusPanelCommand command) {
            command.Sender = Panel;
            Panel.FocusPanel.OnNext(command);
        }
        
        public virtual void ExecuteHidePanel(HidePanelCommand command) {
            command.Sender = Panel;
            Panel.HidePanel.OnNext(command);
        }
        
        public virtual void ExecuteShowPanel(ShowPanelCommand command) {
            command.Sender = Panel;
            Panel.ShowPanel.OnNext(command);
        }
        
        public virtual void ExecuteSetPanelData(SetPanelDataCommand command) {
            command.Sender = Panel;
            Panel.SetPanelData.OnNext(command);
        }
        
        public virtual void ExecutePlayPanelAnimation(PlayPanelAnimationCommand command) {
            command.Sender = Panel;
            Panel.PlayPanelAnimation.OnNext(command);
        }
        
        public virtual void ExecuteDestroyPanel(DestroyPanelCommand command) {
            command.Sender = Panel;
            Panel.DestroyPanel.OnNext(command);
        }
    }
}
