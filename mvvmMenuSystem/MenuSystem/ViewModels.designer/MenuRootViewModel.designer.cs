// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace mvvmMenuSystem {
    using mvvmMenuSystem;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public partial class MenuRootViewModelBase : uFrame.MVVM.ViewModels.ViewModel {
        
        private P<ShieldViewModel> _shieldEmptyProperty;
        
        private P<MainMenuViewModel> _mainMenuProperty;
        
        private P<PanelViewModel> _loadingTopProperty;
        
        private P<ShieldViewModel> _shieldTopProperty;
        
        private ModelCollection<ShieldViewModel> _Shields;
        
        private ModelCollection<PanelViewModel> _Panels;
        
        private Signal<LoadPanelCommand> _LoadPanel;
        
        public MenuRootViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<ShieldViewModel> shieldEmptyProperty {
            get {
                return _shieldEmptyProperty;
            }
            set {
                _shieldEmptyProperty = value;
            }
        }
        
        public virtual P<MainMenuViewModel> mainMenuProperty {
            get {
                return _mainMenuProperty;
            }
            set {
                _mainMenuProperty = value;
            }
        }
        
        public virtual P<PanelViewModel> loadingTopProperty {
            get {
                return _loadingTopProperty;
            }
            set {
                _loadingTopProperty = value;
            }
        }
        
        public virtual P<ShieldViewModel> shieldTopProperty {
            get {
                return _shieldTopProperty;
            }
            set {
                _shieldTopProperty = value;
            }
        }
        
        public virtual ShieldViewModel shieldEmpty {
            get {
                return shieldEmptyProperty.Value;
            }
            set {
                shieldEmptyProperty.Value = value;
            }
        }
        
        public virtual MainMenuViewModel mainMenu {
            get {
                return mainMenuProperty.Value;
            }
            set {
                mainMenuProperty.Value = value;
            }
        }
        
        public virtual PanelViewModel loadingTop {
            get {
                return loadingTopProperty.Value;
            }
            set {
                loadingTopProperty.Value = value;
            }
        }
        
        public virtual ShieldViewModel shieldTop {
            get {
                return shieldTopProperty.Value;
            }
            set {
                shieldTopProperty.Value = value;
            }
        }
        
        public virtual ModelCollection<ShieldViewModel> Shields {
            get {
                return _Shields;
            }
            set {
                _Shields = value;
            }
        }
        
        public virtual ModelCollection<PanelViewModel> Panels {
            get {
                return _Panels;
            }
            set {
                _Panels = value;
            }
        }
        
        public virtual Signal<LoadPanelCommand> LoadPanel {
            get {
                return _LoadPanel;
            }
            set {
                _LoadPanel = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.LoadPanel = new Signal<LoadPanelCommand>(this);
            _shieldEmptyProperty = new P<ShieldViewModel>(this, "shieldEmpty");
            _mainMenuProperty = new P<MainMenuViewModel>(this, "mainMenu");
            _loadingTopProperty = new P<PanelViewModel>(this, "loadingTop");
            _shieldTopProperty = new P<ShieldViewModel>(this, "shieldTop");
            _Shields = new ModelCollection<ShieldViewModel>(this, "Shields");
            _Panels = new ModelCollection<PanelViewModel>(this, "Panels");
        }
        
        public virtual void Execute(LoadPanelCommand argument) {
            this.LoadPanel.OnNext(argument);
        }
        
        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Read(stream);
            		if (stream.DeepSerialize) this.shieldEmpty = stream.DeserializeObject<ShieldViewModel>("shieldEmpty");;
            		if (stream.DeepSerialize) this.mainMenu = stream.DeserializeObject<MainMenuViewModel>("mainMenu");;
            		if (stream.DeepSerialize) this.loadingTop = stream.DeserializeObject<PanelViewModel>("loadingTop");;
            		if (stream.DeepSerialize) this.shieldTop = stream.DeserializeObject<ShieldViewModel>("shieldTop");;
            if (stream.DeepSerialize) {
                this.Shields.Clear();
                this.Shields.AddRange(stream.DeserializeObjectArray<ShieldViewModel>("Shields"));
            }
            if (stream.DeepSerialize) {
                this.Panels.Clear();
                this.Panels.AddRange(stream.DeserializeObjectArray<PanelViewModel>("Panels"));
            }
        }
        
        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Write(stream);
            if (stream.DeepSerialize) stream.SerializeObject("shieldEmpty", this.shieldEmpty);;
            if (stream.DeepSerialize) stream.SerializeObject("mainMenu", this.mainMenu);;
            if (stream.DeepSerialize) stream.SerializeObject("loadingTop", this.loadingTop);;
            if (stream.DeepSerialize) stream.SerializeObject("shieldTop", this.shieldTop);;
            if (stream.DeepSerialize) stream.SerializeArray("Shields", this.Shields);
            if (stream.DeepSerialize) stream.SerializeArray("Panels", this.Panels);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("LoadPanel", LoadPanel) { ParameterType = typeof(LoadPanelCommand) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_shieldEmptyProperty, true, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_mainMenuProperty, true, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_loadingTopProperty, true, false, false, false));
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_shieldTopProperty, true, false, false, false));
            list.Add(new ViewModelPropertyInfo(_Shields, true, true, false, false));
            list.Add(new ViewModelPropertyInfo(_Panels, true, true, false, false));
        }
    }
    
    public partial class MenuRootViewModel {
        
        public MenuRootViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
